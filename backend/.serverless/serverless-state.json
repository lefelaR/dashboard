{
  "service": {
    "service": "wynberg-manage-my-area",
    "serviceObject": {
      "name": "wynberg-manage-my-area"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "region": "eu-central-1",
      "tracing": {
        "apiGateway": true,
        "lambda": true
      },
      "eventBridge": {
        "useCloudFormation": true
      },
      "stage": "prod",
      "environment": {
        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
        "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
        "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
        "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
        "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
        "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
        "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
        "USERS_TABLE": "wynberg-manage-my-area-prod-users",
        "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
        "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
        "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
        "REGION": "eu-central-1",
        "ADMIN_EMAIL": "adriano@wynberg.org.za",
        "STAGE": "prod",
        "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
        "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
      },
      "lambdaHashingVersion": "20201221",
      "deploymentBucket": "turati-serverless-deployments",
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "events:PutEvents"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:DescribeTable",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ses:*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "VisualEditor0",
              "Effect": "Allow",
              "Action": [
                "cloudformation:CreateStack",
                "cloudformation:DeleteStack",
                "cloudformation:DescribeStacks",
                "cloudformation:DescribeStackEvents",
                "cloudformation:DescribeStackResource",
                "cloudformation:DescribeStackResources",
                "cloudformation:ListStackResources",
                "cloudformation:UpdateStack",
                "cloudformation:ValidateTemplate",
                "logs:CreateLogGroup",
                "logs:DescribeLogGroups",
                "logs:DeleteLogGroup"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "versionFunctions": true,
      "deploymentBucketObject": {
        "name": "turati-serverless-deployments",
        "serverSideEncryption": "AES256"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetAllConfigurationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getAllConfigurations"
            },
            "DependsOn": []
          },
          "CreateIssueLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-createIssue"
            },
            "DependsOn": []
          },
          "GetAllIssuesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getAllIssues"
            },
            "DependsOn": []
          },
          "GetIssueLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getIssue"
            },
            "DependsOn": []
          },
          "UpdateIssueLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-updateIssue"
            },
            "DependsOn": []
          },
          "DeleteIssueLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-deleteIssue"
            },
            "DependsOn": []
          },
          "GetUserIssuesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getUserIssues"
            },
            "DependsOn": []
          },
          "CreateIssueCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-createIssueComment"
            },
            "DependsOn": []
          },
          "AddAssigneeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-addAssignee"
            },
            "DependsOn": []
          },
          "ChangeIssueStatusLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-changeIssueStatus"
            },
            "DependsOn": []
          },
          "GetIssueCommentsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getIssueComments"
            },
            "DependsOn": []
          },
          "GetIssueByReferenceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getIssueByReference"
            },
            "DependsOn": []
          },
          "AddIssueJobReferenceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-addIssueJobReference"
            },
            "DependsOn": []
          },
          "CreateCategoryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-createCategory"
            },
            "DependsOn": []
          },
          "UpdateCategoryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-updateCategory"
            },
            "DependsOn": []
          },
          "DeleteCategoryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-deleteCategory"
            },
            "DependsOn": []
          },
          "GetCategoryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getCategory"
            },
            "DependsOn": []
          },
          "GetAllCategoriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getAllCategories"
            },
            "DependsOn": []
          },
          "CreateDepartmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-createDepartment"
            },
            "DependsOn": []
          },
          "UpdateDepartmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-updateDepartment"
            },
            "DependsOn": []
          },
          "DeleteDepartmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-deleteDepartment"
            },
            "DependsOn": []
          },
          "GetDepartmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getDepartment"
            },
            "DependsOn": []
          },
          "GetAllDepartmentsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getAllDepartments"
            },
            "DependsOn": []
          },
          "NotifyIssueCreatedLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-notifyIssueCreated"
            },
            "DependsOn": []
          },
          "NotifyIssueUpdatedLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-notifyIssueUpdated"
            },
            "DependsOn": []
          },
          "UnresolvedIssueLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-unresolvedIssue"
            },
            "DependsOn": []
          },
          "AdminNewIssueReminderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-adminNewIssueReminder"
            },
            "DependsOn": []
          },
          "DailyUnresolvedIssueReminderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-dailyUnresolvedIssueReminder"
            },
            "DependsOn": []
          },
          "NotifyIssueCommentOnLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-notifyIssueCommentOn"
            },
            "DependsOn": []
          },
          "OnAssigneeAddedNotifyAssigneeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-onAssigneeAddedNotifyAssignee"
            },
            "DependsOn": []
          },
          "OverDuePendingIssuesReminderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-overDuePendingIssuesReminder"
            },
            "DependsOn": []
          },
          "IssueStatusChangedLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-issueStatusChanged"
            },
            "DependsOn": []
          },
          "UnverifiedPropertiesReminderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-unverifiedPropertiesReminder"
            },
            "DependsOn": []
          },
          "OnPropertyFlaggedLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-OnPropertyFlagged"
            },
            "DependsOn": []
          },
          "NotifyAdminAboutNewSubscriberLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-notifyAdminAboutNewSubscriber"
            },
            "DependsOn": []
          },
          "CreateRoleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-createRole"
            },
            "DependsOn": []
          },
          "UpdateRoleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-updateRole"
            },
            "DependsOn": []
          },
          "DeleteRoleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-deleteRole"
            },
            "DependsOn": []
          },
          "GetRoleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getRole"
            },
            "DependsOn": []
          },
          "GetAllRolesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getAllRoles"
            },
            "DependsOn": []
          },
          "AdduserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-adduser"
            },
            "DependsOn": []
          },
          "GetAllUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getAllUsers"
            },
            "DependsOn": []
          },
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getUser"
            },
            "DependsOn": []
          },
          "UpdateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-updateUser"
            },
            "DependsOn": []
          },
          "CreatePropertyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-createProperty"
            },
            "DependsOn": []
          },
          "UpdatePropertyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-updateProperty"
            },
            "DependsOn": []
          },
          "DeletePropertyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-deleteProperty"
            },
            "DependsOn": []
          },
          "GetPropertyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getProperty"
            },
            "DependsOn": []
          },
          "GetAllPropertiesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getAllProperties"
            },
            "DependsOn": []
          },
          "UpdateBuildingDetailsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-updateBuildingDetails"
            },
            "DependsOn": []
          },
          "UpdateLevyDetailsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-updateLevyDetails"
            },
            "DependsOn": []
          },
          "UpdateOwerDetailsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-updateOwerDetails"
            },
            "DependsOn": []
          },
          "GetUnverifiedPropertiesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getUnverifiedProperties"
            },
            "DependsOn": []
          },
          "VerificationResetLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-verificationReset"
            },
            "DependsOn": []
          },
          "FlagPropertyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-flagProperty"
            },
            "DependsOn": []
          },
          "UpdateLastInteractionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-updateLastInteraction"
            },
            "DependsOn": []
          },
          "GetAllNewslettersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getAllNewsletters"
            },
            "DependsOn": []
          },
          "PostNewsletterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-postNewsletter"
            },
            "DependsOn": []
          },
          "DeleteNewsletterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-deleteNewsletter"
            },
            "DependsOn": []
          },
          "EditNewsletterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-editNewsletter"
            },
            "DependsOn": []
          },
          "GetArticleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getArticle"
            },
            "DependsOn": []
          },
          "RateNewsletterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-rateNewsletter"
            },
            "DependsOn": []
          },
          "AddRSVPLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-addRSVP"
            },
            "DependsOn": []
          },
          "GetAllRSVPLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getAllRSVP"
            },
            "DependsOn": []
          },
          "GetRSVPLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getRSVP"
            },
            "DependsOn": []
          },
          "CreateInteractionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-createInteraction"
            },
            "DependsOn": []
          },
          "GetAllInteractionsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getAllInteractions"
            },
            "DependsOn": []
          },
          "GetInteractionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getInteraction"
            },
            "DependsOn": []
          },
          "GetUserInteractionsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getUserInteractions"
            },
            "DependsOn": []
          },
          "GetPropertyInteractionsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getPropertyInteractions"
            },
            "DependsOn": []
          },
          "DeleteInteractionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-deleteInteraction"
            },
            "DependsOn": []
          },
          "UpdateInteractionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-updateInteraction"
            },
            "DependsOn": []
          },
          "ZapierInteractionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-zapierInteraction"
            },
            "DependsOn": []
          },
          "GetAGMDocumentsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getAGMDocuments"
            },
            "DependsOn": []
          },
          "UploadAGMDocumentsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-uploadAGMDocuments"
            },
            "DependsOn": []
          },
          "AddSubscriberLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-addSubscriber"
            },
            "DependsOn": []
          },
          "GetAllMembersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wynberg-manage-my-area-prod-getAllMembers"
            },
            "DependsOn": []
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "wynberg-manage-my-area",
                        "prod",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": [
                              "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/wynberg-manage-my-area-prod*:*",
                              {}
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": [
                              "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/wynberg-manage-my-area-prod*:*:*",
                              {}
                            ]
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][3]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][4]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][5]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][6]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "xray:PutTraceSegments",
                          "xray:PutTelemetryRecords"
                        ],
                        "Resource": [
                          "*"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "wynberg-manage-my-area",
                    "prod",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            },
            "DependsOn": []
          },
          "GetAllConfigurationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/configurations/getAllConfigs/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getAllConfigurations",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllConfigurationsLogGroup"
            ]
          },
          "CreateIssueLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/issues/create/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-createIssue",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateIssueLogGroup"
            ]
          },
          "GetAllIssuesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/issues/getAll/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getAllIssues",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllIssuesLogGroup"
            ]
          },
          "GetIssueLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/issues/get/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getIssue",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetIssueLogGroup"
            ]
          },
          "UpdateIssueLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/issues/update/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-updateIssue",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateIssueLogGroup"
            ]
          },
          "DeleteIssueLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/issues/delete/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-deleteIssue",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteIssueLogGroup"
            ]
          },
          "GetUserIssuesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/issues/getUserIssues/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getUserIssues",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserIssuesLogGroup"
            ]
          },
          "CreateIssueCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/issues/createComment/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-createIssueComment",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateIssueCommentLogGroup"
            ]
          },
          "AddAssigneeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/issues/addAssignee/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-addAssignee",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddAssigneeLogGroup"
            ]
          },
          "ChangeIssueStatusLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/issues/changeStatus/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-changeIssueStatus",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ChangeIssueStatusLogGroup"
            ]
          },
          "GetIssueCommentsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/issues/getIssueComments/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getIssueComments",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetIssueCommentsLogGroup"
            ]
          },
          "GetIssueByReferenceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/issues/getIssueByRefNumber/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getIssueByReference",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetIssueByReferenceLogGroup"
            ]
          },
          "AddIssueJobReferenceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/issues/addJobReference/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-addIssueJobReference",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddIssueJobReferenceLogGroup"
            ]
          },
          "CreateCategoryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/categories/create/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-createCategory",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCategoryLogGroup"
            ]
          },
          "UpdateCategoryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/categories/update/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-updateCategory",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateCategoryLogGroup"
            ]
          },
          "DeleteCategoryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/categories/delete/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-deleteCategory",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteCategoryLogGroup"
            ]
          },
          "GetCategoryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/categories/get/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getCategory",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCategoryLogGroup"
            ]
          },
          "GetAllCategoriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/categories/getAll/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getAllCategories",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllCategoriesLogGroup"
            ]
          },
          "CreateDepartmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/departments/create/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-createDepartment",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateDepartmentLogGroup"
            ]
          },
          "UpdateDepartmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/departments/update/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-updateDepartment",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateDepartmentLogGroup"
            ]
          },
          "DeleteDepartmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/departments/delete/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-deleteDepartment",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteDepartmentLogGroup"
            ]
          },
          "GetDepartmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/departments/get/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getDepartment",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDepartmentLogGroup"
            ]
          },
          "GetAllDepartmentsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/departments/getAll/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getAllDepartments",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllDepartmentsLogGroup"
            ]
          },
          "NotifyIssueCreatedLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/notifications/NotifyIssueCreated/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-notifyIssueCreated",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NotifyIssueCreatedLogGroup"
            ]
          },
          "NotifyIssueUpdatedLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/notifications/notifyissueUpdated/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-notifyIssueUpdated",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NotifyIssueUpdatedLogGroup"
            ]
          },
          "UnresolvedIssueLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/notifications/adminNewIssueReminder/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-unresolvedIssue",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UnresolvedIssueLogGroup"
            ]
          },
          "AdminNewIssueReminderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/notifications/adminNewIssueReminder/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-adminNewIssueReminder",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AdminNewIssueReminderLogGroup"
            ]
          },
          "DailyUnresolvedIssueReminderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/notifications/dailyUnresolvedIssueReminder/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-dailyUnresolvedIssueReminder",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DailyUnresolvedIssueReminderLogGroup"
            ]
          },
          "NotifyIssueCommentOnLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/notifications/notifyIssueCommentedOn/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-notifyIssueCommentOn",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NotifyIssueCommentOnLogGroup"
            ]
          },
          "OnAssigneeAddedNotifyAssigneeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/notifications/onAssigneeAddedNotifyAssignee/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-onAssigneeAddedNotifyAssignee",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "OnAssigneeAddedNotifyAssigneeLogGroup"
            ]
          },
          "OverDuePendingIssuesReminderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/notifications/overDuePendingIssuesReminder/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-overDuePendingIssuesReminder",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "OverDuePendingIssuesReminderLogGroup"
            ]
          },
          "IssueStatusChangedLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/notifications/issueStatusChanged/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-issueStatusChanged",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IssueStatusChangedLogGroup"
            ]
          },
          "UnverifiedPropertiesReminderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/notifications/unverifiedPropertiesReminder/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-unverifiedPropertiesReminder",
              "MemorySize": 1024,
              "Timeout": 30,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UnverifiedPropertiesReminderLogGroup"
            ]
          },
          "OnPropertyFlaggedLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/notifications/propertyFlagged/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-OnPropertyFlagged",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "OnPropertyFlaggedLogGroup"
            ]
          },
          "NotifyAdminAboutNewSubscriberLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/notifications/NotifyAdminAboutNewSubscriber/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-notifyAdminAboutNewSubscriber",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NotifyAdminAboutNewSubscriberLogGroup"
            ]
          },
          "CreateRoleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/roles/create/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-createRole",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateRoleLogGroup"
            ]
          },
          "UpdateRoleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/roles/update/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-updateRole",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateRoleLogGroup"
            ]
          },
          "DeleteRoleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/roles/delete/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-deleteRole",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteRoleLogGroup"
            ]
          },
          "GetRoleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/roles/get/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getRole",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetRoleLogGroup"
            ]
          },
          "GetAllRolesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/roles/getAll/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getAllRoles",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllRolesLogGroup"
            ]
          },
          "AdduserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/users/addUser/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-adduser",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AdduserLogGroup"
            ]
          },
          "GetAllUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/users/getAllUsers/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getAllUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllUsersLogGroup"
            ]
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/users/getUser/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "UpdateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/users/updateUser/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-updateUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserLogGroup"
            ]
          },
          "CreatePropertyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/properties/create/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-createProperty",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreatePropertyLogGroup"
            ]
          },
          "UpdatePropertyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/properties/updatePropertyDetails/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-updateProperty",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdatePropertyLogGroup"
            ]
          },
          "DeletePropertyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/properties/delete/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-deleteProperty",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeletePropertyLogGroup"
            ]
          },
          "GetPropertyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/properties/get/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getProperty",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPropertyLogGroup"
            ]
          },
          "GetAllPropertiesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/properties/getAll/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getAllProperties",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllPropertiesLogGroup"
            ]
          },
          "UpdateBuildingDetailsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/properties/updateBuildingDetails/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-updateBuildingDetails",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateBuildingDetailsLogGroup"
            ]
          },
          "UpdateLevyDetailsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/properties/updateLevyDetails/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-updateLevyDetails",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateLevyDetailsLogGroup"
            ]
          },
          "UpdateOwerDetailsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/properties/updateOwnerDetails/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-updateOwerDetails",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateOwerDetailsLogGroup"
            ]
          },
          "GetUnverifiedPropertiesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/properties/getUnverified/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getUnverifiedProperties",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUnverifiedPropertiesLogGroup"
            ]
          },
          "VerificationResetLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/properties/verificationReset/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-verificationReset",
              "MemorySize": 1024,
              "Timeout": 30,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "VerificationResetLogGroup"
            ]
          },
          "FlagPropertyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/properties/flagProperty/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-flagProperty",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FlagPropertyLogGroup"
            ]
          },
          "UpdateLastInteractionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/properties/updateLastInteraction/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-updateLastInteraction",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateLastInteractionLogGroup"
            ]
          },
          "GetAllNewslettersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/newsletter/getAll/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getAllNewsletters",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllNewslettersLogGroup"
            ]
          },
          "PostNewsletterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/newsletter/create/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-postNewsletter",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PostNewsletterLogGroup"
            ]
          },
          "DeleteNewsletterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/newsletter/delete/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-deleteNewsletter",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteNewsletterLogGroup"
            ]
          },
          "EditNewsletterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/newsletter/edit/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-editNewsletter",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EditNewsletterLogGroup"
            ]
          },
          "GetArticleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/newsletter/getArticle/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getArticle",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetArticleLogGroup"
            ]
          },
          "RateNewsletterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/newsletter/rateArticle/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-rateNewsletter",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RateNewsletterLogGroup"
            ]
          },
          "AddRSVPLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/rsvps/add/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-addRSVP",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddRSVPLogGroup"
            ]
          },
          "GetAllRSVPLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/rsvps/getAll/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getAllRSVP",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllRSVPLogGroup"
            ]
          },
          "GetRSVPLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/rsvps/get/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getRSVP",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetRSVPLogGroup"
            ]
          },
          "CreateInteractionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/interactions/createInteraction/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-createInteraction",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateInteractionLogGroup"
            ]
          },
          "GetAllInteractionsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/interactions/getAllInteractions/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getAllInteractions",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllInteractionsLogGroup"
            ]
          },
          "GetInteractionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/interactions/getInteraction/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getInteraction",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetInteractionLogGroup"
            ]
          },
          "GetUserInteractionsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/interactions/getUserInteractions/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getUserInteractions",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserInteractionsLogGroup"
            ]
          },
          "GetPropertyInteractionsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/interactions/getPropertyInteractions/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getPropertyInteractions",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPropertyInteractionsLogGroup"
            ]
          },
          "DeleteInteractionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/interactions/deleteInteraction/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-deleteInteraction",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteInteractionLogGroup"
            ]
          },
          "UpdateInteractionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/interactions/updateInteraction/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-updateInteraction",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateInteractionLogGroup"
            ]
          },
          "ZapierInteractionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/interactions/zapierInteraction/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-zapierInteraction",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ZapierInteractionLogGroup"
            ]
          },
          "GetAGMDocumentsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/agm/get/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getAGMDocuments",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAGMDocumentsLogGroup"
            ]
          },
          "UploadAGMDocumentsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/agm/create/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-uploadAGMDocuments",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UploadAGMDocumentsLogGroup"
            ]
          },
          "AddSubscriberLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/mail-subscribers/add/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-addSubscriber",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddSubscriberLogGroup"
            ]
          },
          "GetAllMembersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "turati-serverless-deployments",
                "S3Key": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z/wynberg-manage-my-area.zip"
              },
              "Handler": "src/functions/mail-subscribers/getAll/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wynberg-manage-my-area-prod-getAllMembers",
              "MemorySize": 1024,
              "Timeout": 15,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "ISSUE_TABLE": "wynberg-manage-my-area-prod-issues",
                  "LOG_TABLE": "wynberg-manage-my-area-prod-logs",
                  "PROPERTY_TABLE": "wynberg-manage-my-area-prod-properties",
                  "CATEGORY_TABLE": "wynberg-manage-my-area-prod-categories",
                  "DEPARTMENT_TABLE": "wynberg-manage-my-area-prod-departments",
                  "ROLES_TABLE": "wynberg-manage-my-area-prod-roles",
                  "USERS_TABLE": "wynberg-manage-my-area-prod-users",
                  "NEWSLETTERS_TABLE": "wynberg-manage-my-area-prod-newsletter",
                  "RSVP_TABLE": "wynberg-manage-my-area-prod-rsvp",
                  "AGM_TABLE": "wynberg-manage-my-area-prod-agmdocuments",
                  "REGION": "eu-central-1",
                  "ADMIN_EMAIL": "adriano@wynberg.org.za",
                  "STAGE": "prod",
                  "INTERACTIONS_TABLE": "wynberg-manage-my-area-prod-interactions",
                  "MAIL_SUBSCRIBER_TABLE": "wynberg-manage-my-area-prod-mailSubscribers"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllMembersLogGroup"
            ]
          },
          "UnresolvedIssueEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(24 hours)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "UnresolvedIssueLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "unresolvedIssueSchedule"
                }
              ]
            },
            "DependsOn": []
          },
          "AdminNewIssueReminderEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(24 hours)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "AdminNewIssueReminderLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "adminNewIssueReminderSchedule"
                }
              ]
            },
            "DependsOn": []
          },
          "DailyUnresolvedIssueReminderEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(24 hours)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "DailyUnresolvedIssueReminderLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "dailyUnresolvedIssueReminderSchedule"
                }
              ]
            },
            "DependsOn": []
          },
          "OverDuePendingIssuesReminderEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(24 hours)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "OverDuePendingIssuesReminderLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "overDuePendingIssuesReminderSchedule"
                }
              ]
            },
            "DependsOn": []
          },
          "UnverifiedPropertiesReminderEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(24 hours)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "UnverifiedPropertiesReminderLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "unverifiedPropertiesReminderSchedule"
                }
              ]
            },
            "DependsOn": []
          },
          "VerificationResetEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(24 hours)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "VerificationResetLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "verificationResetSchedule"
                }
              ]
            },
            "DependsOn": []
          },
          "ApiGatewayMethodConfigurationsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceConfigurations"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodIssuesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssues"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssuesIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodIssuesUserDashissuesUseridVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssuesUserDashissuesUseridVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarCommentsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssuesIdVarComments"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarAddDashassigneeOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssuesIdVarAddDashassignee"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarChangeDashstatusOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssuesIdVarChangeDashstatus"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodIssuesGetDashbyDashrefRefnumberVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssuesGetDashbyDashrefRefnumberVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarAddDashjobDashreferenceOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssuesIdVarAddDashjobDashreference"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodCategoriesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceCategories"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodCategoriesIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceCategoriesIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodDepartmentsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceDepartments"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodDepartmentsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceDepartmentsIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesVerificationsDashreminderOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesVerificationsDashreminder"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodRolesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceRoles"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodRolesIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceRolesIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodUsersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceUsers"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodUsersIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceUsersIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceProperties"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesIdVarBuildingOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesIdVarBuilding"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesIdVarLevyOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesIdVarLevy"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesIdVarOwnerOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesIdVarOwner"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesUnverifiedOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesUnverified"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesVerificationDashresetOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesVerificationDashreset"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesIdVarFlagOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesIdVarFlag"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodNewslettersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceNewsletters"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodNewslettersIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,DELETE'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceNewslettersIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodRatenewsletterOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceRatenewsletter"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodRsvpOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceRsvp"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodRsvpIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceRsvpIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodInteractionsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceInteractions"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodInteractionsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,DELETE,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceInteractionsIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodInteractionsUserIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceInteractionsUserIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodInteractionsPropertyIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceInteractionsPropertyIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodInteractionsZapierOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceInteractionsZapier"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodAgmdocOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceAgmdoc"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodMailDashsubscribersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceMailDashsubscribers"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodConfigurationsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceConfigurations"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllConfigurationsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodIssuesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssues"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateIssueLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodIssuesPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodIssuesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssues"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllIssuesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssuesIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetIssueLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssuesIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateIssueLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodIssuesIdVarPutApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssuesIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteIssueLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodIssuesUserDashissuesUseridVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssuesUserDashissuesUseridVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserIssuesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarCommentsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssuesIdVarComments"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateIssueCommentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodIssuesIdVarCommentsPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarAddDashassigneePut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssuesIdVarAddDashassignee"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddAssigneeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodIssuesIdVarAddDashassigneePutApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarChangeDashstatusPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssuesIdVarChangeDashstatus"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ChangeIssueStatusLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodIssuesIdVarChangeDashstatusPutApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarCommentsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssuesIdVarComments"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetIssueCommentsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodIssuesGetDashbyDashrefRefnumberVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssuesGetDashbyDashrefRefnumberVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetIssueByReferenceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarAddDashjobDashreferencePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceIssuesIdVarAddDashjobDashreference"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddIssueJobReferenceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodIssuesIdVarAddDashjobDashreferencePostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodCategoriesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceCategories"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateCategoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodCategoriesPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodCategoriesIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceCategoriesIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateCategoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodCategoriesIdVarPutApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodCategoriesIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceCategoriesIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteCategoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodCategoriesIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceCategoriesIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetCategoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodCategoriesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceCategories"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllCategoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodDepartmentsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceDepartments"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateDepartmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodDepartmentsPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodDepartmentsIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceDepartmentsIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateDepartmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodDepartmentsIdVarPutApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodDepartmentsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceDepartmentsIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteDepartmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodDepartmentsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceDepartmentsIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDepartmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodDepartmentsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceDepartments"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllDepartmentsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesVerificationsDashreminderGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesVerificationsDashreminder"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UnverifiedPropertiesReminderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodRolesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceRoles"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateRoleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodRolesPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodRolesIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceRolesIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateRoleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodRolesIdVarPutApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodRolesIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceRolesIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteRoleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodRolesIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceRolesIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetRoleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodRolesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceRoles"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllRolesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodUsersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceUsers"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdduserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodUsersPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodUsersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceUsers"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodUsersIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceUsersIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodUsersIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceUsersIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodUsersIdVarPutApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceProperties"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreatePropertyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodPropertiesPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdatePropertyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodPropertiesIdVarPutApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeletePropertyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPropertyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceProperties"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllPropertiesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesIdVarBuildingPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesIdVarBuilding"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateBuildingDetailsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodPropertiesIdVarBuildingPutApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesIdVarLevyPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesIdVarLevy"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateLevyDetailsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodPropertiesIdVarLevyPutApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesIdVarOwnerPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesIdVarOwner"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateOwerDetailsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodPropertiesIdVarOwnerPutApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesUnverifiedGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesUnverified"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUnverifiedPropertiesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesVerificationDashresetGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesVerificationDashreset"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "VerificationResetLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesIdVarFlagPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourcePropertiesIdVarFlag"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FlagPropertyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodPropertiesIdVarFlagPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodNewslettersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceNewsletters"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllNewslettersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodNewslettersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceNewsletters"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PostNewsletterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodNewslettersPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodNewslettersIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceNewslettersIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteNewsletterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodNewslettersIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceNewslettersIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "EditNewsletterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodNewslettersIdVarPutApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodNewslettersIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceNewslettersIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetArticleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodRatenewsletterPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceRatenewsletter"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RateNewsletterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodRatenewsletterPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodRsvpPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceRsvp"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddRSVPLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodRsvpPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodRsvpGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceRsvp"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllRSVPLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodRsvpIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceRsvpIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetRSVPLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodInteractionsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceInteractions"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateInteractionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodInteractionsPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodInteractionsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceInteractions"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllInteractionsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodInteractionsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceInteractionsIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetInteractionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodInteractionsUserIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceInteractionsUserIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserInteractionsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodInteractionsPropertyIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceInteractionsPropertyIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPropertyInteractionsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodInteractionsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceInteractionsIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteInteractionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodInteractionsIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceInteractionsIdVar"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateInteractionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodInteractionsIdVarPutApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodInteractionsZapierPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceInteractionsZapier"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ZapierInteractionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodInteractionsZapierPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodAgmdocGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceAgmdoc"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAGMDocumentsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodAgmdocPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceAgmdoc"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UploadAGMDocumentsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodMailDashsubscribersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceMailDashsubscribers"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddSubscriberLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayWynbergmanagemyareaRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodMailDashsubscribersPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayMethodMailDashsubscribersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayResourceMailDashsubscribers"
                ]
              },
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllMembersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "APINestedStack",
              "PermissionsNestedStack"
            ]
          },
          "ApiGatewayWynbergmanagemyareaRequestValidator": {
            "Type": "AWS::ApiGateway::RequestValidator",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ValidateRequestBody": true,
              "ValidateRequestParameters": true,
              "Name": "wynberg-manage-my-area-prod | Validate request body and querystring parameters"
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodIssuesPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "createdBy": {
                    "type": "string"
                  },
                  "creatorEmail": {
                    "type": "string"
                  },
                  "categoryId": {
                    "type": "string"
                  },
                  "images": {
                    "type": "array"
                  },
                  "coordinates": {
                    "type": "object",
                    "properties": {
                      "longitude": {
                        "type": "number"
                      },
                      "latitude": {
                        "type": "number"
                      }
                    }
                  }
                },
                "required": [
                  "categoryId",
                  "description",
                  "creatorEmail"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarPutApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "description"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarCommentsPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  },
                  "author": {
                    "type": "string"
                  }
                },
                "required": [
                  "message",
                  "author"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarAddDashassigneePutApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "email"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarChangeDashstatusPutApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  }
                },
                "required": [
                  "status"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodIssuesIdVarAddDashjobDashreferencePostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "issueId": {
                    "type": "string"
                  },
                  "jobReference": {
                    "type": "string"
                  }
                },
                "required": [
                  "jobReference"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodCategoriesPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "departmentId": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "description",
                  "departmentId"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodCategoriesIdVarPutApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "departmentId": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "description",
                  "departmentId"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodDepartmentsPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "title",
                  "description"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodDepartmentsIdVarPutApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "title",
                  "description"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodRolesPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "array"
                  }
                },
                "required": [
                  "title",
                  "description"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodRolesIdVarPutApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "array"
                  }
                },
                "required": [
                  "title",
                  "description",
                  "permissions"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodUsersPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "department": {
                    "type": "string"
                  },
                  "roles": {
                    "type": "array"
                  },
                  "avatar": {
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodUsersIdVarPutApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "department": {
                    "type": "string"
                  },
                  "roles": {
                    "type": "array"
                  },
                  "avatar": {
                    "type": "string"
                  },
                  "lastLoggedIn": {
                    "type": "number"
                  },
                  "isActive": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "id"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "erfNumber": {
                    "type": "string"
                  },
                  "erfSize": {
                    "type": "number"
                  },
                  "officeNumber": {
                    "type": "string"
                  },
                  "officeEmail": {
                    "type": "string"
                  },
                  "fax": {
                    "type": "string"
                  },
                  "accountNumber": {
                    "type": "string"
                  },
                  "currentBalance": {
                    "type": "number"
                  },
                  "isOverdue": {
                    "type": "boolean"
                  },
                  "managementCompany": {
                    "type": "string"
                  },
                  "propertyId": {
                    "type": "string"
                  },
                  "tradingAs": {
                    "type": "string"
                  },
                  "vat": {
                    "type": "string"
                  },
                  "mdaAccNumber": {
                    "type": "string"
                  },
                  "municipalValue": {
                    "type": "string"
                  },
                  "notes": {
                    "type": "string"
                  },
                  "allocatedUserId": {
                    "type": "string"
                  },
                  "approached": {
                    "type": "string"
                  },
                  "contributorStatus": {
                    "type": "string"
                  },
                  "contributionInteraction": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "building": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                },
                "required": [
                  "erfNumber"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesIdVarPutApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "erfNumber": {
                    "type": "string"
                  },
                  "erfSize": {
                    "type": "number"
                  },
                  "officeNumber": {
                    "type": "string"
                  },
                  "officeEmail": {
                    "type": "string"
                  },
                  "fax": {
                    "type": "string"
                  },
                  "accountNumber": {
                    "type": "string"
                  },
                  "currentBalance": {
                    "type": "number"
                  },
                  "isOverdue": {
                    "type": "boolean"
                  },
                  "managementCompany": {
                    "type": "string"
                  },
                  "propertyId": {
                    "type": "string"
                  },
                  "tradingAs": {
                    "type": "string"
                  },
                  "vat": {
                    "type": "string"
                  },
                  "mdaAccNumber": {
                    "type": "string"
                  },
                  "municipalValue": {
                    "type": "string"
                  },
                  "notes": {
                    "type": "string"
                  },
                  "allocatedUserId": {
                    "type": "string"
                  },
                  "approached": {
                    "type": "string"
                  }
                },
                "required": [
                  "erfNumber",
                  "currentBalance"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesIdVarBuildingPutApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "coordinates": {
                    "type": "string"
                  },
                  "postalAddress": {
                    "type": "string"
                  },
                  "streetNumber": {
                    "type": "number"
                  },
                  "streetName": {
                    "type": "string"
                  },
                  "address2": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "province": {
                    "type": "string"
                  },
                  "postalCode": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "coordinates",
                  "postalAddress",
                  "streetNumber",
                  "streetName",
                  "city",
                  "province",
                  "postalCode",
                  "country"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesIdVarLevyPutApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "contact": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "exclusive": {
                    "type": "string"
                  },
                  "fax": {
                    "type": "string"
                  },
                  "lastVerificationDate": {
                    "type": "number"
                  },
                  "mobile": {
                    "type": "string"
                  },
                  "telephone": {
                    "type": "string"
                  },
                  "verified": {
                    "type": "boolean"
                  }
                }
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesIdVarOwnerPutApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "verified": {
                    "type": "boolean"
                  },
                  "phoneNumber": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "lastVerificationDate": {
                    "type": "number"
                  }
                },
                "required": [
                  "name",
                  "email"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodPropertiesIdVarFlagPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                },
                "required": [
                  "message"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodNewslettersPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "newsletterid": {
                    "type": "string"
                  },
                  "summary": {
                    "type": "string"
                  },
                  "rating": {
                    "type": "number"
                  },
                  "youtube": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "slug": {
                    "type": "string"
                  },
                  "html": {
                    "type": "string"
                  },
                  "notified": {
                    "type": "boolean"
                  },
                  "author": {
                    "type": "string"
                  },
                  "featuredImageUrl": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  }
                },
                "required": [
                  "html",
                  "featuredImageUrl",
                  "title",
                  "author"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodNewslettersIdVarPutApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "summary": {
                    "type": "string"
                  },
                  "youtube": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "slug": {
                    "type": "string"
                  },
                  "html": {
                    "type": "string"
                  },
                  "rating": {
                    "type": "number"
                  },
                  "notified": {
                    "type": "boolean"
                  },
                  "author": {
                    "type": "string"
                  },
                  "featuredImageUrl": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  }
                },
                "required": [
                  "html",
                  "featuredImageUrl",
                  "title",
                  "author"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodRatenewsletterPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "rating": {
                    "type": "number"
                  },
                  "slug": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "string"
                  }
                },
                "required": [
                  "rating",
                  "slug",
                  "userId"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodRsvpPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "rsvpId": {
                    "type": "string"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "phoneNumber": {
                    "type": "string"
                  },
                  "companyName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "isOwner": {
                    "type": "boolean"
                  },
                  "dateAGM": {
                    "type": "string"
                  },
                  "proxy": {
                    "type": "string"
                  },
                  "erfNumber": {
                    "type": "array"
                  },
                  "proxyDetails": {
                    "type": "object",
                    "properties": {
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "phoneNumber": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "isOwner": {
                        "type": "boolean"
                      },
                      "erfNumber": {
                        "type": "array"
                      }
                    },
                    "required": [
                      "firstName",
                      "lastName",
                      "phoneNumber",
                      "erfNumber"
                    ]
                  }
                },
                "required": [
                  "rsvpId",
                  "firstName",
                  "lastName",
                  "phoneNumber",
                  "companyName",
                  "email",
                  "isOwner",
                  "dateAGM",
                  "proxy",
                  "erfNumber"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodInteractionsPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "notes": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "string"
                  },
                  "propertyId": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "title",
                  "notes",
                  "userId",
                  "propertyId"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodInteractionsIdVarPutApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "notes": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "string"
                  },
                  "propertyId": {
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "title",
                  "notes",
                  "userId",
                  "propertyId",
                  "type"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodInteractionsZapierPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "subject": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "notes": {
                    "type": "string"
                  },
                  "userEmail": {
                    "type": "string"
                  }
                },
                "required": [
                  "subject",
                  "notes",
                  "type",
                  "userEmail"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayMethodMailDashsubscribersPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "email"
                ]
              }
            },
            "DependsOn": [
              "APINestedStack"
            ]
          },
          "ApiGatewayDeployment1661866186185": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Fn::GetAtt": [
                  "APINestedStack",
                  "Outputs.ApiGatewayRestApi"
                ]
              },
              "StageName": "prod"
            },
            "DependsOn": [
              "ApiGatewayMethodConfigurationsOptions",
              "ApiGatewayMethodIssuesOptions",
              "ApiGatewayMethodIssuesIdVarOptions",
              "ApiGatewayMethodIssuesUserDashissuesUseridVarOptions",
              "ApiGatewayMethodIssuesIdVarCommentsOptions",
              "ApiGatewayMethodIssuesIdVarAddDashassigneeOptions",
              "ApiGatewayMethodIssuesIdVarChangeDashstatusOptions",
              "ApiGatewayMethodIssuesGetDashbyDashrefRefnumberVarOptions",
              "ApiGatewayMethodIssuesIdVarAddDashjobDashreferenceOptions",
              "ApiGatewayMethodCategoriesOptions",
              "ApiGatewayMethodCategoriesIdVarOptions",
              "ApiGatewayMethodDepartmentsOptions",
              "ApiGatewayMethodDepartmentsIdVarOptions",
              "ApiGatewayMethodPropertiesVerificationsDashreminderOptions",
              "ApiGatewayMethodRolesOptions",
              "ApiGatewayMethodRolesIdVarOptions",
              "ApiGatewayMethodUsersOptions",
              "ApiGatewayMethodUsersIdVarOptions",
              "ApiGatewayMethodPropertiesOptions",
              "ApiGatewayMethodPropertiesIdVarOptions",
              "ApiGatewayMethodPropertiesIdVarBuildingOptions",
              "ApiGatewayMethodPropertiesIdVarLevyOptions",
              "ApiGatewayMethodPropertiesIdVarOwnerOptions",
              "ApiGatewayMethodPropertiesUnverifiedOptions",
              "ApiGatewayMethodPropertiesVerificationDashresetOptions",
              "ApiGatewayMethodPropertiesIdVarFlagOptions",
              "ApiGatewayMethodNewslettersOptions",
              "ApiGatewayMethodNewslettersIdVarOptions",
              "ApiGatewayMethodRatenewsletterOptions",
              "ApiGatewayMethodRsvpOptions",
              "ApiGatewayMethodRsvpIdVarOptions",
              "ApiGatewayMethodInteractionsOptions",
              "ApiGatewayMethodInteractionsIdVarOptions",
              "ApiGatewayMethodInteractionsUserIdVarOptions",
              "ApiGatewayMethodInteractionsPropertyIdVarOptions",
              "ApiGatewayMethodInteractionsZapierOptions",
              "ApiGatewayMethodAgmdocOptions",
              "ApiGatewayMethodMailDashsubscribersOptions",
              "ApiGatewayMethodConfigurationsGet",
              "ApiGatewayMethodIssuesPost",
              "ApiGatewayMethodIssuesGet",
              "ApiGatewayMethodIssuesIdVarGet",
              "ApiGatewayMethodIssuesIdVarPut",
              "ApiGatewayMethodIssuesIdVarDelete",
              "ApiGatewayMethodIssuesUserDashissuesUseridVarGet",
              "ApiGatewayMethodIssuesIdVarCommentsPost",
              "ApiGatewayMethodIssuesIdVarAddDashassigneePut",
              "ApiGatewayMethodIssuesIdVarChangeDashstatusPut",
              "ApiGatewayMethodIssuesIdVarCommentsGet",
              "ApiGatewayMethodIssuesGetDashbyDashrefRefnumberVarGet",
              "ApiGatewayMethodIssuesIdVarAddDashjobDashreferencePost",
              "ApiGatewayMethodCategoriesPost",
              "ApiGatewayMethodCategoriesIdVarPut",
              "ApiGatewayMethodCategoriesIdVarDelete",
              "ApiGatewayMethodCategoriesIdVarGet",
              "ApiGatewayMethodCategoriesGet",
              "ApiGatewayMethodDepartmentsPost",
              "ApiGatewayMethodDepartmentsIdVarPut",
              "ApiGatewayMethodDepartmentsIdVarDelete",
              "ApiGatewayMethodDepartmentsIdVarGet",
              "ApiGatewayMethodDepartmentsGet",
              "ApiGatewayMethodPropertiesVerificationsDashreminderGet",
              "ApiGatewayMethodRolesPost",
              "ApiGatewayMethodRolesIdVarPut",
              "ApiGatewayMethodRolesIdVarDelete",
              "ApiGatewayMethodRolesIdVarGet",
              "ApiGatewayMethodRolesGet",
              "ApiGatewayMethodUsersPost",
              "ApiGatewayMethodUsersGet",
              "ApiGatewayMethodUsersIdVarGet",
              "ApiGatewayMethodUsersIdVarPut",
              "ApiGatewayMethodPropertiesPost",
              "ApiGatewayMethodPropertiesIdVarPut",
              "ApiGatewayMethodPropertiesIdVarDelete",
              "ApiGatewayMethodPropertiesIdVarGet",
              "ApiGatewayMethodPropertiesGet",
              "ApiGatewayMethodPropertiesIdVarBuildingPut",
              "ApiGatewayMethodPropertiesIdVarLevyPut",
              "ApiGatewayMethodPropertiesIdVarOwnerPut",
              "ApiGatewayMethodPropertiesUnverifiedGet",
              "ApiGatewayMethodPropertiesVerificationDashresetGet",
              "ApiGatewayMethodPropertiesIdVarFlagPost",
              "ApiGatewayMethodNewslettersGet",
              "ApiGatewayMethodNewslettersPost",
              "ApiGatewayMethodNewslettersIdVarDelete",
              "ApiGatewayMethodNewslettersIdVarPut",
              "ApiGatewayMethodNewslettersIdVarGet",
              "ApiGatewayMethodRatenewsletterPost",
              "ApiGatewayMethodRsvpPost",
              "ApiGatewayMethodRsvpGet",
              "ApiGatewayMethodRsvpIdVarGet",
              "ApiGatewayMethodInteractionsPost",
              "ApiGatewayMethodInteractionsGet",
              "ApiGatewayMethodInteractionsIdVarGet",
              "ApiGatewayMethodInteractionsUserIdVarGet",
              "ApiGatewayMethodInteractionsPropertyIdVarGet",
              "ApiGatewayMethodInteractionsIdVarDelete",
              "ApiGatewayMethodInteractionsIdVarPut",
              "ApiGatewayMethodInteractionsZapierPost",
              "ApiGatewayMethodAgmdocGet",
              "ApiGatewayMethodAgmdocPost",
              "ApiGatewayMethodMailDashsubscribersPost",
              "ApiGatewayMethodMailDashsubscribersGet",
              "APINestedStack"
            ]
          },
          "WynbergmanagemyareaprodnotifyIssueCreatedrule1EventBridgeRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "EventBusName": "notifications",
              "EventPattern": {
                "source": [
                  "wynberg-mma.issue.created-prod"
                ],
                "detail-type": [
                  "IssueCreated"
                ]
              },
              "Name": "wynberg-manage-my-area-prod-notifyIssueCreated-rule-1",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "NotifyIssueCreatedLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "wynberg-manage-my-area-prod-notifyIssueCreated-rule-1-target"
                }
              ]
            },
            "DependsOn": []
          },
          "WynbergmanagemyareaprodnotifyIssueUpdatedrule1EventBridgeRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "EventBusName": "notifications",
              "EventPattern": {
                "source": [
                  "wynberg-mma.issue.updated-prod"
                ],
                "detail-type": [
                  "IssueUpdated"
                ]
              },
              "Name": "wynberg-manage-my-area-prod-notifyIssueUpdated-rule-1",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "NotifyIssueUpdatedLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "wynberg-manage-my-area-prod-notifyIssueUpdated-rule-1-target"
                }
              ]
            },
            "DependsOn": []
          },
          "WynbergmanagemyareaprodnotifyIssueCommentOnrule1EventBridgeRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "EventBusName": "notifications",
              "EventPattern": {
                "source": [
                  "wynberg-mma.issue.issueHasNewComment-prod"
                ],
                "detail-type": [
                  "issueHasNewComment"
                ]
              },
              "Name": "wynberg-manage-my-area-prod-notifyIssueCommentOn-rule-1",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "NotifyIssueCommentOnLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "wynberg-manage-my-area-prod-notifyIssueCommentOn-rule-1-target"
                }
              ]
            },
            "DependsOn": []
          },
          "WynbergmanagemyareaprodonAssigneeAddedNotifyAssigneerule1EventBridgeRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "EventBusName": "notifications",
              "EventPattern": {
                "source": [
                  "wynberg-mma.issue.userAssigned-prod"
                ],
                "detail-type": [
                  "userAssigned"
                ]
              },
              "Name": "wynberg-manage-my-area-prod-onAssigneeAddedNotifyAssignee-rule-1",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "OnAssigneeAddedNotifyAssigneeLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "wynberg-manage-my-area-pr6bbd38ed183354c660dc37b628e84311-target"
                }
              ]
            },
            "DependsOn": []
          },
          "WynbergmanagemyareaprodissueStatusChangedrule1EventBridgeRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "EventBusName": "notifications",
              "EventPattern": {
                "source": [
                  "wynberg-mma.issue.conditionChanged-prod"
                ],
                "detail-type": [
                  "IssueConditionChanged"
                ]
              },
              "Name": "wynberg-manage-my-area-prod-issueStatusChanged-rule-1",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "IssueStatusChangedLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "wynberg-manage-my-area-prod-issueStatusChanged-rule-1-target"
                }
              ]
            },
            "DependsOn": []
          },
          "WynbergmanagemyareaprodOnPropertyFlaggedrule1EventBridgeRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "EventBusName": "notifications",
              "EventPattern": {
                "source": [
                  "wynberg-mma.property.flagged-prod"
                ],
                "detail-type": [
                  "propertyFlagged"
                ]
              },
              "Name": "wynberg-manage-my-area-prod-OnPropertyFlagged-rule-1",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "OnPropertyFlaggedLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "wynberg-manage-my-area-prod-OnPropertyFlagged-rule-1-target"
                }
              ]
            },
            "DependsOn": []
          },
          "WynbergmanagemyareaprodnotifyAdminAboutNewSubscriberrule1EventBridgeRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "EventBusName": "notifications",
              "EventPattern": {
                "source": [
                  "wynberg-mma.mailSubscribers.created-prod"
                ],
                "detail-type": [
                  "mailSubscribersCreated"
                ]
              },
              "Name": "wynberg-manage-my-area-prod-notifyAdminAboutNewSubscriber-rule-1",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "NotifyAdminAboutNewSubscriberLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "wynberg-manage-my-area-pr8eec768d523035f3ea59f652f37a5376-target"
                }
              ]
            },
            "DependsOn": []
          },
          "WynbergmanagemyareaprodupdateLastInteractionrule1EventBridgeRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "EventBusName": "notifications",
              "EventPattern": {
                "source": [
                  "wynberg-mma.interaction.created-prod"
                ],
                "detail-type": [
                  "interactionCreated"
                ]
              },
              "Name": "wynberg-manage-my-area-prod-updateLastInteraction-rule-1",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "UpdateLastInteractionLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "wynberg-manage-my-area-prod-updateLastInteraction-rule-1-target"
                }
              ]
            },
            "DependsOn": []
          },
          "IssuesTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "wynberg-manage-my-area-prod-issues",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            },
            "DependsOn": []
          },
          "CategoriesTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "wynberg-manage-my-area-prod-categories",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            },
            "DependsOn": []
          },
          "DepartmentsTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "wynberg-manage-my-area-prod-departments",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            },
            "DependsOn": []
          },
          "RolesTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "wynberg-manage-my-area-prod-roles",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            },
            "DependsOn": []
          },
          "LogsTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Delete",
            "Properties": {
              "TableName": "wynberg-manage-my-area-prod-logs",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ]
            },
            "DependsOn": []
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "wynberg-manage-my-area-prod-users",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            },
            "DependsOn": []
          },
          "NewslettersTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Delete",
            "Properties": {
              "TableName": "wynberg-manage-my-area-prod-newsletter",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "newsletterId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "slug",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "newsletterId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "slug",
                  "KeySchema": [
                    {
                      "AttributeName": "slug",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            },
            "DependsOn": []
          },
          "propertiesTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "wynberg-manage-my-area-prod-properties",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            },
            "DependsOn": []
          },
          "RSVPTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "wynberg-manage-my-area-prod-rsvp",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "rsvpId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "rsvpId",
                  "KeyType": "HASH"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            },
            "DependsOn": []
          },
          "InteractionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "wynberg-manage-my-area-prod-interactions",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            },
            "DependsOn": []
          },
          "AGMTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "wynberg-manage-my-area-prod-agmdocuments",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "documentId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "documentId",
                  "KeyType": "HASH"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            },
            "DependsOn": []
          },
          "MailSubscribersTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Delete",
            "Properties": {
              "TableName": "wynberg-manage-my-area-prod-mailSubscribers",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ]
            },
            "DependsOn": []
          },
          "APINestedStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
              "Parameters": {},
              "TemplateURL": {
                "Fn::Join": [
                  "/",
                  [
                    "https://s3.eu-central-1.amazonaws.com",
                    "turati-serverless-deployments",
                    "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z",
                    "cloudformation-template-API-nested-stack.json"
                  ]
                ]
              }
            }
          },
          "PermissionsNestedStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
              "Parameters": {
                "UnresolvedIssueEventsRuleSchedule1ArnParameter": {
                  "Fn::GetAtt": [
                    "UnresolvedIssueEventsRuleSchedule1",
                    "Arn"
                  ]
                },
                "UnresolvedIssueLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "UnresolvedIssueLambdaFunction",
                    "Arn"
                  ]
                },
                "AdminNewIssueReminderEventsRuleSchedule1ArnParameter": {
                  "Fn::GetAtt": [
                    "AdminNewIssueReminderEventsRuleSchedule1",
                    "Arn"
                  ]
                },
                "AdminNewIssueReminderLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "AdminNewIssueReminderLambdaFunction",
                    "Arn"
                  ]
                },
                "DailyUnresolvedIssueReminderEventsRuleSchedule1ArnParameter": {
                  "Fn::GetAtt": [
                    "DailyUnresolvedIssueReminderEventsRuleSchedule1",
                    "Arn"
                  ]
                },
                "DailyUnresolvedIssueReminderLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "DailyUnresolvedIssueReminderLambdaFunction",
                    "Arn"
                  ]
                },
                "OverDuePendingIssuesReminderEventsRuleSchedule1ArnParameter": {
                  "Fn::GetAtt": [
                    "OverDuePendingIssuesReminderEventsRuleSchedule1",
                    "Arn"
                  ]
                },
                "OverDuePendingIssuesReminderLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "OverDuePendingIssuesReminderLambdaFunction",
                    "Arn"
                  ]
                },
                "UnverifiedPropertiesReminderEventsRuleSchedule1ArnParameter": {
                  "Fn::GetAtt": [
                    "UnverifiedPropertiesReminderEventsRuleSchedule1",
                    "Arn"
                  ]
                },
                "UnverifiedPropertiesReminderLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "UnverifiedPropertiesReminderLambdaFunction",
                    "Arn"
                  ]
                },
                "VerificationResetEventsRuleSchedule1ArnParameter": {
                  "Fn::GetAtt": [
                    "VerificationResetEventsRuleSchedule1",
                    "Arn"
                  ]
                },
                "VerificationResetLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "VerificationResetLambdaFunction",
                    "Arn"
                  ]
                },
                "ApiGatewayRestApiParameter": {
                  "Fn::GetAtt": [
                    "APINestedStack",
                    "Outputs.ApiGatewayRestApi"
                  ]
                },
                "GetAllConfigurationsLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetAllConfigurationsLambdaFunction",
                    "Arn"
                  ]
                },
                "CreateIssueLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "CreateIssueLambdaFunction",
                    "Arn"
                  ]
                },
                "GetAllIssuesLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetAllIssuesLambdaFunction",
                    "Arn"
                  ]
                },
                "GetIssueLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetIssueLambdaFunction",
                    "Arn"
                  ]
                },
                "UpdateIssueLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "UpdateIssueLambdaFunction",
                    "Arn"
                  ]
                },
                "DeleteIssueLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "DeleteIssueLambdaFunction",
                    "Arn"
                  ]
                },
                "GetUserIssuesLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetUserIssuesLambdaFunction",
                    "Arn"
                  ]
                },
                "CreateIssueCommentLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "CreateIssueCommentLambdaFunction",
                    "Arn"
                  ]
                },
                "AddAssigneeLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "AddAssigneeLambdaFunction",
                    "Arn"
                  ]
                },
                "ChangeIssueStatusLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "ChangeIssueStatusLambdaFunction",
                    "Arn"
                  ]
                },
                "GetIssueCommentsLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetIssueCommentsLambdaFunction",
                    "Arn"
                  ]
                },
                "GetIssueByReferenceLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetIssueByReferenceLambdaFunction",
                    "Arn"
                  ]
                },
                "AddIssueJobReferenceLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "AddIssueJobReferenceLambdaFunction",
                    "Arn"
                  ]
                },
                "CreateCategoryLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "CreateCategoryLambdaFunction",
                    "Arn"
                  ]
                },
                "UpdateCategoryLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "UpdateCategoryLambdaFunction",
                    "Arn"
                  ]
                },
                "DeleteCategoryLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "DeleteCategoryLambdaFunction",
                    "Arn"
                  ]
                },
                "GetCategoryLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetCategoryLambdaFunction",
                    "Arn"
                  ]
                },
                "GetAllCategoriesLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetAllCategoriesLambdaFunction",
                    "Arn"
                  ]
                },
                "CreateDepartmentLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "CreateDepartmentLambdaFunction",
                    "Arn"
                  ]
                },
                "UpdateDepartmentLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "UpdateDepartmentLambdaFunction",
                    "Arn"
                  ]
                },
                "DeleteDepartmentLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "DeleteDepartmentLambdaFunction",
                    "Arn"
                  ]
                },
                "GetDepartmentLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetDepartmentLambdaFunction",
                    "Arn"
                  ]
                },
                "GetAllDepartmentsLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetAllDepartmentsLambdaFunction",
                    "Arn"
                  ]
                },
                "CreateRoleLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "CreateRoleLambdaFunction",
                    "Arn"
                  ]
                },
                "UpdateRoleLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "UpdateRoleLambdaFunction",
                    "Arn"
                  ]
                },
                "DeleteRoleLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "DeleteRoleLambdaFunction",
                    "Arn"
                  ]
                },
                "GetRoleLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetRoleLambdaFunction",
                    "Arn"
                  ]
                },
                "GetAllRolesLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetAllRolesLambdaFunction",
                    "Arn"
                  ]
                },
                "AdduserLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "AdduserLambdaFunction",
                    "Arn"
                  ]
                },
                "GetAllUsersLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetAllUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "GetUserLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetUserLambdaFunction",
                    "Arn"
                  ]
                },
                "UpdateUserLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "UpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "CreatePropertyLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "CreatePropertyLambdaFunction",
                    "Arn"
                  ]
                },
                "UpdatePropertyLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "UpdatePropertyLambdaFunction",
                    "Arn"
                  ]
                },
                "DeletePropertyLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "DeletePropertyLambdaFunction",
                    "Arn"
                  ]
                },
                "GetPropertyLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetPropertyLambdaFunction",
                    "Arn"
                  ]
                },
                "GetAllPropertiesLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetAllPropertiesLambdaFunction",
                    "Arn"
                  ]
                },
                "UpdateBuildingDetailsLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "UpdateBuildingDetailsLambdaFunction",
                    "Arn"
                  ]
                },
                "UpdateLevyDetailsLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "UpdateLevyDetailsLambdaFunction",
                    "Arn"
                  ]
                },
                "UpdateOwerDetailsLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "UpdateOwerDetailsLambdaFunction",
                    "Arn"
                  ]
                },
                "GetUnverifiedPropertiesLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetUnverifiedPropertiesLambdaFunction",
                    "Arn"
                  ]
                },
                "FlagPropertyLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "FlagPropertyLambdaFunction",
                    "Arn"
                  ]
                },
                "GetAllNewslettersLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetAllNewslettersLambdaFunction",
                    "Arn"
                  ]
                },
                "PostNewsletterLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "PostNewsletterLambdaFunction",
                    "Arn"
                  ]
                },
                "DeleteNewsletterLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "DeleteNewsletterLambdaFunction",
                    "Arn"
                  ]
                },
                "EditNewsletterLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "EditNewsletterLambdaFunction",
                    "Arn"
                  ]
                },
                "GetArticleLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetArticleLambdaFunction",
                    "Arn"
                  ]
                },
                "RateNewsletterLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "RateNewsletterLambdaFunction",
                    "Arn"
                  ]
                },
                "AddRSVPLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "AddRSVPLambdaFunction",
                    "Arn"
                  ]
                },
                "GetAllRSVPLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetAllRSVPLambdaFunction",
                    "Arn"
                  ]
                },
                "GetRSVPLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetRSVPLambdaFunction",
                    "Arn"
                  ]
                },
                "CreateInteractionLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "CreateInteractionLambdaFunction",
                    "Arn"
                  ]
                },
                "GetAllInteractionsLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetAllInteractionsLambdaFunction",
                    "Arn"
                  ]
                },
                "GetInteractionLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetInteractionLambdaFunction",
                    "Arn"
                  ]
                },
                "GetUserInteractionsLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetUserInteractionsLambdaFunction",
                    "Arn"
                  ]
                },
                "GetPropertyInteractionsLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetPropertyInteractionsLambdaFunction",
                    "Arn"
                  ]
                },
                "DeleteInteractionLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "DeleteInteractionLambdaFunction",
                    "Arn"
                  ]
                },
                "UpdateInteractionLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "UpdateInteractionLambdaFunction",
                    "Arn"
                  ]
                },
                "ZapierInteractionLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "ZapierInteractionLambdaFunction",
                    "Arn"
                  ]
                },
                "GetAGMDocumentsLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetAGMDocumentsLambdaFunction",
                    "Arn"
                  ]
                },
                "UploadAGMDocumentsLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "UploadAGMDocumentsLambdaFunction",
                    "Arn"
                  ]
                },
                "AddSubscriberLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "AddSubscriberLambdaFunction",
                    "Arn"
                  ]
                },
                "GetAllMembersLambdaFunctionArnParameter": {
                  "Fn::GetAtt": [
                    "GetAllMembersLambdaFunction",
                    "Arn"
                  ]
                },
                "NotifyIssueCreatedLambdaFunctionParameter": {
                  "Ref": "NotifyIssueCreatedLambdaFunction"
                },
                "NotifyIssueUpdatedLambdaFunctionParameter": {
                  "Ref": "NotifyIssueUpdatedLambdaFunction"
                },
                "NotifyIssueCommentOnLambdaFunctionParameter": {
                  "Ref": "NotifyIssueCommentOnLambdaFunction"
                },
                "OnAssigneeAddedNotifyAssigneeLambdaFunctionParameter": {
                  "Ref": "OnAssigneeAddedNotifyAssigneeLambdaFunction"
                },
                "IssueStatusChangedLambdaFunctionParameter": {
                  "Ref": "IssueStatusChangedLambdaFunction"
                },
                "OnPropertyFlaggedLambdaFunctionParameter": {
                  "Ref": "OnPropertyFlaggedLambdaFunction"
                },
                "NotifyAdminAboutNewSubscriberLambdaFunctionParameter": {
                  "Ref": "NotifyAdminAboutNewSubscriberLambdaFunction"
                },
                "UpdateLastInteractionLambdaFunctionParameter": {
                  "Ref": "UpdateLastInteractionLambdaFunction"
                }
              },
              "TemplateURL": {
                "Fn::Join": [
                  "/",
                  [
                    "https://s3.eu-central-1.amazonaws.com",
                    "turati-serverless-deployments",
                    "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z",
                    "cloudformation-template-Permissions-nested-stack.json"
                  ]
                ]
              }
            },
            "DependsOn": [
              "UnresolvedIssueEventsRuleSchedule1",
              "UnresolvedIssueLambdaFunction",
              "AdminNewIssueReminderEventsRuleSchedule1",
              "AdminNewIssueReminderLambdaFunction",
              "DailyUnresolvedIssueReminderEventsRuleSchedule1",
              "DailyUnresolvedIssueReminderLambdaFunction",
              "OverDuePendingIssuesReminderEventsRuleSchedule1",
              "OverDuePendingIssuesReminderLambdaFunction",
              "UnverifiedPropertiesReminderEventsRuleSchedule1",
              "UnverifiedPropertiesReminderLambdaFunction",
              "VerificationResetEventsRuleSchedule1",
              "VerificationResetLambdaFunction",
              "APINestedStack",
              "GetAllConfigurationsLambdaFunction",
              "CreateIssueLambdaFunction",
              "GetAllIssuesLambdaFunction",
              "GetIssueLambdaFunction",
              "UpdateIssueLambdaFunction",
              "DeleteIssueLambdaFunction",
              "GetUserIssuesLambdaFunction",
              "CreateIssueCommentLambdaFunction",
              "AddAssigneeLambdaFunction",
              "ChangeIssueStatusLambdaFunction",
              "GetIssueCommentsLambdaFunction",
              "GetIssueByReferenceLambdaFunction",
              "AddIssueJobReferenceLambdaFunction",
              "CreateCategoryLambdaFunction",
              "UpdateCategoryLambdaFunction",
              "DeleteCategoryLambdaFunction",
              "GetCategoryLambdaFunction",
              "GetAllCategoriesLambdaFunction",
              "CreateDepartmentLambdaFunction",
              "UpdateDepartmentLambdaFunction",
              "DeleteDepartmentLambdaFunction",
              "GetDepartmentLambdaFunction",
              "GetAllDepartmentsLambdaFunction",
              "CreateRoleLambdaFunction",
              "UpdateRoleLambdaFunction",
              "DeleteRoleLambdaFunction",
              "GetRoleLambdaFunction",
              "GetAllRolesLambdaFunction",
              "AdduserLambdaFunction",
              "GetAllUsersLambdaFunction",
              "GetUserLambdaFunction",
              "UpdateUserLambdaFunction",
              "CreatePropertyLambdaFunction",
              "UpdatePropertyLambdaFunction",
              "DeletePropertyLambdaFunction",
              "GetPropertyLambdaFunction",
              "GetAllPropertiesLambdaFunction",
              "UpdateBuildingDetailsLambdaFunction",
              "UpdateLevyDetailsLambdaFunction",
              "UpdateOwerDetailsLambdaFunction",
              "GetUnverifiedPropertiesLambdaFunction",
              "FlagPropertyLambdaFunction",
              "GetAllNewslettersLambdaFunction",
              "PostNewsletterLambdaFunction",
              "DeleteNewsletterLambdaFunction",
              "EditNewsletterLambdaFunction",
              "GetArticleLambdaFunction",
              "RateNewsletterLambdaFunction",
              "AddRSVPLambdaFunction",
              "GetAllRSVPLambdaFunction",
              "GetRSVPLambdaFunction",
              "CreateInteractionLambdaFunction",
              "GetAllInteractionsLambdaFunction",
              "GetInteractionLambdaFunction",
              "GetUserInteractionsLambdaFunction",
              "GetPropertyInteractionsLambdaFunction",
              "DeleteInteractionLambdaFunction",
              "UpdateInteractionLambdaFunction",
              "ZapierInteractionLambdaFunction",
              "GetAGMDocumentsLambdaFunction",
              "UploadAGMDocumentsLambdaFunction",
              "AddSubscriberLambdaFunction",
              "GetAllMembersLambdaFunction",
              "NotifyIssueCreatedLambdaFunction",
              "NotifyIssueUpdatedLambdaFunction",
              "NotifyIssueCommentOnLambdaFunction",
              "OnAssigneeAddedNotifyAssigneeLambdaFunction",
              "IssueStatusChangedLambdaFunction",
              "OnPropertyFlaggedLambdaFunction",
              "NotifyAdminAboutNewSubscriberLambdaFunction",
              "UpdateLastInteractionLambdaFunction"
            ]
          },
          "VersionsNestedStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
              "Parameters": {
                "GetAllConfigurationsLambdaFunctionParameter": {
                  "Ref": "GetAllConfigurationsLambdaFunction"
                },
                "CreateIssueLambdaFunctionParameter": {
                  "Ref": "CreateIssueLambdaFunction"
                },
                "GetAllIssuesLambdaFunctionParameter": {
                  "Ref": "GetAllIssuesLambdaFunction"
                },
                "GetIssueLambdaFunctionParameter": {
                  "Ref": "GetIssueLambdaFunction"
                },
                "UpdateIssueLambdaFunctionParameter": {
                  "Ref": "UpdateIssueLambdaFunction"
                },
                "DeleteIssueLambdaFunctionParameter": {
                  "Ref": "DeleteIssueLambdaFunction"
                },
                "GetUserIssuesLambdaFunctionParameter": {
                  "Ref": "GetUserIssuesLambdaFunction"
                },
                "CreateIssueCommentLambdaFunctionParameter": {
                  "Ref": "CreateIssueCommentLambdaFunction"
                },
                "AddAssigneeLambdaFunctionParameter": {
                  "Ref": "AddAssigneeLambdaFunction"
                },
                "ChangeIssueStatusLambdaFunctionParameter": {
                  "Ref": "ChangeIssueStatusLambdaFunction"
                },
                "GetIssueCommentsLambdaFunctionParameter": {
                  "Ref": "GetIssueCommentsLambdaFunction"
                },
                "GetIssueByReferenceLambdaFunctionParameter": {
                  "Ref": "GetIssueByReferenceLambdaFunction"
                },
                "AddIssueJobReferenceLambdaFunctionParameter": {
                  "Ref": "AddIssueJobReferenceLambdaFunction"
                },
                "CreateCategoryLambdaFunctionParameter": {
                  "Ref": "CreateCategoryLambdaFunction"
                },
                "UpdateCategoryLambdaFunctionParameter": {
                  "Ref": "UpdateCategoryLambdaFunction"
                },
                "DeleteCategoryLambdaFunctionParameter": {
                  "Ref": "DeleteCategoryLambdaFunction"
                },
                "GetCategoryLambdaFunctionParameter": {
                  "Ref": "GetCategoryLambdaFunction"
                },
                "GetAllCategoriesLambdaFunctionParameter": {
                  "Ref": "GetAllCategoriesLambdaFunction"
                },
                "CreateDepartmentLambdaFunctionParameter": {
                  "Ref": "CreateDepartmentLambdaFunction"
                },
                "UpdateDepartmentLambdaFunctionParameter": {
                  "Ref": "UpdateDepartmentLambdaFunction"
                },
                "DeleteDepartmentLambdaFunctionParameter": {
                  "Ref": "DeleteDepartmentLambdaFunction"
                },
                "GetDepartmentLambdaFunctionParameter": {
                  "Ref": "GetDepartmentLambdaFunction"
                },
                "GetAllDepartmentsLambdaFunctionParameter": {
                  "Ref": "GetAllDepartmentsLambdaFunction"
                },
                "NotifyIssueCreatedLambdaFunctionParameter": {
                  "Ref": "NotifyIssueCreatedLambdaFunction"
                },
                "NotifyIssueUpdatedLambdaFunctionParameter": {
                  "Ref": "NotifyIssueUpdatedLambdaFunction"
                },
                "UnresolvedIssueLambdaFunctionParameter": {
                  "Ref": "UnresolvedIssueLambdaFunction"
                },
                "AdminNewIssueReminderLambdaFunctionParameter": {
                  "Ref": "AdminNewIssueReminderLambdaFunction"
                },
                "DailyUnresolvedIssueReminderLambdaFunctionParameter": {
                  "Ref": "DailyUnresolvedIssueReminderLambdaFunction"
                },
                "NotifyIssueCommentOnLambdaFunctionParameter": {
                  "Ref": "NotifyIssueCommentOnLambdaFunction"
                },
                "OnAssigneeAddedNotifyAssigneeLambdaFunctionParameter": {
                  "Ref": "OnAssigneeAddedNotifyAssigneeLambdaFunction"
                },
                "OverDuePendingIssuesReminderLambdaFunctionParameter": {
                  "Ref": "OverDuePendingIssuesReminderLambdaFunction"
                },
                "IssueStatusChangedLambdaFunctionParameter": {
                  "Ref": "IssueStatusChangedLambdaFunction"
                },
                "UnverifiedPropertiesReminderLambdaFunctionParameter": {
                  "Ref": "UnverifiedPropertiesReminderLambdaFunction"
                },
                "OnPropertyFlaggedLambdaFunctionParameter": {
                  "Ref": "OnPropertyFlaggedLambdaFunction"
                },
                "NotifyAdminAboutNewSubscriberLambdaFunctionParameter": {
                  "Ref": "NotifyAdminAboutNewSubscriberLambdaFunction"
                },
                "CreateRoleLambdaFunctionParameter": {
                  "Ref": "CreateRoleLambdaFunction"
                },
                "UpdateRoleLambdaFunctionParameter": {
                  "Ref": "UpdateRoleLambdaFunction"
                },
                "DeleteRoleLambdaFunctionParameter": {
                  "Ref": "DeleteRoleLambdaFunction"
                },
                "GetRoleLambdaFunctionParameter": {
                  "Ref": "GetRoleLambdaFunction"
                },
                "GetAllRolesLambdaFunctionParameter": {
                  "Ref": "GetAllRolesLambdaFunction"
                },
                "AdduserLambdaFunctionParameter": {
                  "Ref": "AdduserLambdaFunction"
                },
                "GetAllUsersLambdaFunctionParameter": {
                  "Ref": "GetAllUsersLambdaFunction"
                },
                "GetUserLambdaFunctionParameter": {
                  "Ref": "GetUserLambdaFunction"
                },
                "UpdateUserLambdaFunctionParameter": {
                  "Ref": "UpdateUserLambdaFunction"
                },
                "CreatePropertyLambdaFunctionParameter": {
                  "Ref": "CreatePropertyLambdaFunction"
                },
                "UpdatePropertyLambdaFunctionParameter": {
                  "Ref": "UpdatePropertyLambdaFunction"
                },
                "DeletePropertyLambdaFunctionParameter": {
                  "Ref": "DeletePropertyLambdaFunction"
                },
                "GetPropertyLambdaFunctionParameter": {
                  "Ref": "GetPropertyLambdaFunction"
                },
                "GetAllPropertiesLambdaFunctionParameter": {
                  "Ref": "GetAllPropertiesLambdaFunction"
                },
                "UpdateBuildingDetailsLambdaFunctionParameter": {
                  "Ref": "UpdateBuildingDetailsLambdaFunction"
                },
                "UpdateLevyDetailsLambdaFunctionParameter": {
                  "Ref": "UpdateLevyDetailsLambdaFunction"
                },
                "UpdateOwerDetailsLambdaFunctionParameter": {
                  "Ref": "UpdateOwerDetailsLambdaFunction"
                },
                "GetUnverifiedPropertiesLambdaFunctionParameter": {
                  "Ref": "GetUnverifiedPropertiesLambdaFunction"
                },
                "VerificationResetLambdaFunctionParameter": {
                  "Ref": "VerificationResetLambdaFunction"
                },
                "FlagPropertyLambdaFunctionParameter": {
                  "Ref": "FlagPropertyLambdaFunction"
                },
                "UpdateLastInteractionLambdaFunctionParameter": {
                  "Ref": "UpdateLastInteractionLambdaFunction"
                },
                "GetAllNewslettersLambdaFunctionParameter": {
                  "Ref": "GetAllNewslettersLambdaFunction"
                },
                "PostNewsletterLambdaFunctionParameter": {
                  "Ref": "PostNewsletterLambdaFunction"
                },
                "DeleteNewsletterLambdaFunctionParameter": {
                  "Ref": "DeleteNewsletterLambdaFunction"
                },
                "EditNewsletterLambdaFunctionParameter": {
                  "Ref": "EditNewsletterLambdaFunction"
                },
                "GetArticleLambdaFunctionParameter": {
                  "Ref": "GetArticleLambdaFunction"
                },
                "RateNewsletterLambdaFunctionParameter": {
                  "Ref": "RateNewsletterLambdaFunction"
                },
                "AddRSVPLambdaFunctionParameter": {
                  "Ref": "AddRSVPLambdaFunction"
                },
                "GetAllRSVPLambdaFunctionParameter": {
                  "Ref": "GetAllRSVPLambdaFunction"
                },
                "GetRSVPLambdaFunctionParameter": {
                  "Ref": "GetRSVPLambdaFunction"
                },
                "CreateInteractionLambdaFunctionParameter": {
                  "Ref": "CreateInteractionLambdaFunction"
                },
                "GetAllInteractionsLambdaFunctionParameter": {
                  "Ref": "GetAllInteractionsLambdaFunction"
                },
                "GetInteractionLambdaFunctionParameter": {
                  "Ref": "GetInteractionLambdaFunction"
                },
                "GetUserInteractionsLambdaFunctionParameter": {
                  "Ref": "GetUserInteractionsLambdaFunction"
                },
                "GetPropertyInteractionsLambdaFunctionParameter": {
                  "Ref": "GetPropertyInteractionsLambdaFunction"
                },
                "DeleteInteractionLambdaFunctionParameter": {
                  "Ref": "DeleteInteractionLambdaFunction"
                },
                "UpdateInteractionLambdaFunctionParameter": {
                  "Ref": "UpdateInteractionLambdaFunction"
                },
                "ZapierInteractionLambdaFunctionParameter": {
                  "Ref": "ZapierInteractionLambdaFunction"
                },
                "GetAGMDocumentsLambdaFunctionParameter": {
                  "Ref": "GetAGMDocumentsLambdaFunction"
                },
                "UploadAGMDocumentsLambdaFunctionParameter": {
                  "Ref": "UploadAGMDocumentsLambdaFunction"
                },
                "AddSubscriberLambdaFunctionParameter": {
                  "Ref": "AddSubscriberLambdaFunction"
                },
                "GetAllMembersLambdaFunctionParameter": {
                  "Ref": "GetAllMembersLambdaFunction"
                }
              },
              "TemplateURL": {
                "Fn::Join": [
                  "/",
                  [
                    "https://s3.eu-central-1.amazonaws.com",
                    "turati-serverless-deployments",
                    "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z",
                    "cloudformation-template-Versions-nested-stack.json"
                  ]
                ]
              }
            },
            "DependsOn": [
              "GetAllConfigurationsLambdaFunction",
              "CreateIssueLambdaFunction",
              "GetAllIssuesLambdaFunction",
              "GetIssueLambdaFunction",
              "UpdateIssueLambdaFunction",
              "DeleteIssueLambdaFunction",
              "GetUserIssuesLambdaFunction",
              "CreateIssueCommentLambdaFunction",
              "AddAssigneeLambdaFunction",
              "ChangeIssueStatusLambdaFunction",
              "GetIssueCommentsLambdaFunction",
              "GetIssueByReferenceLambdaFunction",
              "AddIssueJobReferenceLambdaFunction",
              "CreateCategoryLambdaFunction",
              "UpdateCategoryLambdaFunction",
              "DeleteCategoryLambdaFunction",
              "GetCategoryLambdaFunction",
              "GetAllCategoriesLambdaFunction",
              "CreateDepartmentLambdaFunction",
              "UpdateDepartmentLambdaFunction",
              "DeleteDepartmentLambdaFunction",
              "GetDepartmentLambdaFunction",
              "GetAllDepartmentsLambdaFunction",
              "NotifyIssueCreatedLambdaFunction",
              "NotifyIssueUpdatedLambdaFunction",
              "UnresolvedIssueLambdaFunction",
              "AdminNewIssueReminderLambdaFunction",
              "DailyUnresolvedIssueReminderLambdaFunction",
              "NotifyIssueCommentOnLambdaFunction",
              "OnAssigneeAddedNotifyAssigneeLambdaFunction",
              "OverDuePendingIssuesReminderLambdaFunction",
              "IssueStatusChangedLambdaFunction",
              "UnverifiedPropertiesReminderLambdaFunction",
              "OnPropertyFlaggedLambdaFunction",
              "NotifyAdminAboutNewSubscriberLambdaFunction",
              "CreateRoleLambdaFunction",
              "UpdateRoleLambdaFunction",
              "DeleteRoleLambdaFunction",
              "GetRoleLambdaFunction",
              "GetAllRolesLambdaFunction",
              "AdduserLambdaFunction",
              "GetAllUsersLambdaFunction",
              "GetUserLambdaFunction",
              "UpdateUserLambdaFunction",
              "CreatePropertyLambdaFunction",
              "UpdatePropertyLambdaFunction",
              "DeletePropertyLambdaFunction",
              "GetPropertyLambdaFunction",
              "GetAllPropertiesLambdaFunction",
              "UpdateBuildingDetailsLambdaFunction",
              "UpdateLevyDetailsLambdaFunction",
              "UpdateOwerDetailsLambdaFunction",
              "GetUnverifiedPropertiesLambdaFunction",
              "VerificationResetLambdaFunction",
              "FlagPropertyLambdaFunction",
              "UpdateLastInteractionLambdaFunction",
              "GetAllNewslettersLambdaFunction",
              "PostNewsletterLambdaFunction",
              "DeleteNewsletterLambdaFunction",
              "EditNewsletterLambdaFunction",
              "GetArticleLambdaFunction",
              "RateNewsletterLambdaFunction",
              "AddRSVPLambdaFunction",
              "GetAllRSVPLambdaFunction",
              "GetRSVPLambdaFunction",
              "CreateInteractionLambdaFunction",
              "GetAllInteractionsLambdaFunction",
              "GetInteractionLambdaFunction",
              "GetUserInteractionsLambdaFunction",
              "GetPropertyInteractionsLambdaFunction",
              "DeleteInteractionLambdaFunction",
              "UpdateInteractionLambdaFunction",
              "ZapierInteractionLambdaFunction",
              "GetAGMDocumentsLambdaFunction",
              "UploadAGMDocumentsLambdaFunction",
              "AddSubscriberLambdaFunction",
              "GetAllMembersLambdaFunction"
            ]
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "turati-serverless-deployments",
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-ServerlessDeploymentBucketName"
            }
          },
          "GetAllConfigurationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetAllConfigurationsLambdaVersionyvmnl5sWG422AszV09cd2FqUO0iRPtIdWSwBjTXEjzI"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetAllConfigurationsLambdaFunctionQualifiedArn"
            }
          },
          "CreateIssueLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.CreateIssueLambdaVersiontMrjFS0dM2FzPdMFppRapGVLHt4KUlHPgSgjRh5FVcA"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-CreateIssueLambdaFunctionQualifiedArn"
            }
          },
          "GetAllIssuesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetAllIssuesLambdaVersionHdn7Lg7lt9wDOCbz6oA2JnJegPV8RXkuKaqFp0sLJY"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetAllIssuesLambdaFunctionQualifiedArn"
            }
          },
          "GetIssueLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetIssueLambdaVersionfPREjcCEcxPynkVHh7rqavFkcDIzWWQ4MJ1OiW78uQs"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetIssueLambdaFunctionQualifiedArn"
            }
          },
          "UpdateIssueLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.UpdateIssueLambdaVersionfy06Z4DsQQ6WHNDT9zL6vNFuoeU9sCqRLwMbsMkm1g"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-UpdateIssueLambdaFunctionQualifiedArn"
            }
          },
          "DeleteIssueLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.DeleteIssueLambdaVersionMamAn46MwMaXxzQu3ja9IdiKtRJZtFWpkOxoB09bMA"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-DeleteIssueLambdaFunctionQualifiedArn"
            }
          },
          "GetUserIssuesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetUserIssuesLambdaVersionAezffBlK6hkcZukhHIvFY4SBYPOaIdvKSWcJV6rcq4"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetUserIssuesLambdaFunctionQualifiedArn"
            }
          },
          "CreateIssueCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.CreateIssueCommentLambdaVersionjFWmKP7o7xLSkgngnQmNqlOEGsPiqEB02jCsZHguVI"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-CreateIssueCommentLambdaFunctionQualifiedArn"
            }
          },
          "AddAssigneeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.AddAssigneeLambdaVersionvIh5aQxPxHIiQbMuque6XI4P94lonNY0CU3i2b7Fnnc"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-AddAssigneeLambdaFunctionQualifiedArn"
            }
          },
          "ChangeIssueStatusLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.ChangeIssueStatusLambdaVersionOpnwvrnmS8thKj511lXwDhbeKHoKdvKeUyxUWCelogk"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-ChangeIssueStatusLambdaFunctionQualifiedArn"
            }
          },
          "GetIssueCommentsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetIssueCommentsLambdaVersionM6ZlV9t219yrOUVsIMvlkyjXBwBuR7mNL8zUQiavQ"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetIssueCommentsLambdaFunctionQualifiedArn"
            }
          },
          "GetIssueByReferenceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetIssueByReferenceLambdaVersion99oo8qMBO11OLDfrbY3ub181nx6k4bWt1XFrIu8Ez7E"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetIssueByReferenceLambdaFunctionQualifiedArn"
            }
          },
          "AddIssueJobReferenceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.AddIssueJobReferenceLambdaVersion4gFeDdMtMPfcQXLEKNvvp6SRqAKyc7x2beDP12xo"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-AddIssueJobReferenceLambdaFunctionQualifiedArn"
            }
          },
          "CreateCategoryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.CreateCategoryLambdaVersionhY5wVfqI4h5yd468NCj5ZoBeZ48D8NrvzGsXv0miH3o"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-CreateCategoryLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCategoryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.UpdateCategoryLambdaVersionOCijmls485PzphCz4LNn33IJkfvta1STQCELfd32Bk"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-UpdateCategoryLambdaFunctionQualifiedArn"
            }
          },
          "DeleteCategoryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.DeleteCategoryLambdaVersionamUDp3vOVcLoM3pJcDmuZz4jRV0RpChbPKtwvJE"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-DeleteCategoryLambdaFunctionQualifiedArn"
            }
          },
          "GetCategoryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetCategoryLambdaVersionPGxRX0gOtyu2CEXewMuU2DRMkB3JA7HtPBsh16h9bYk"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetCategoryLambdaFunctionQualifiedArn"
            }
          },
          "GetAllCategoriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetAllCategoriesLambdaVersionuFGSwEICpNBBOqoWTePoN9dBzW49VA2z9AgLFUXYG4"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetAllCategoriesLambdaFunctionQualifiedArn"
            }
          },
          "CreateDepartmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.CreateDepartmentLambdaVersionYnOunkLjzZu6BJ0iamztr54rw9xCKj7n5JeaYtfR6A"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-CreateDepartmentLambdaFunctionQualifiedArn"
            }
          },
          "UpdateDepartmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.UpdateDepartmentLambdaVersion7QVPtVcLRRW7jXSjvkQoNur3Q2zvbVp4CYNnHkGfIlU"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-UpdateDepartmentLambdaFunctionQualifiedArn"
            }
          },
          "DeleteDepartmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.DeleteDepartmentLambdaVersiondF3Nthc3swIbP9xtTf061Z02H9Y9jPWPDpzBq3to"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-DeleteDepartmentLambdaFunctionQualifiedArn"
            }
          },
          "GetDepartmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetDepartmentLambdaVersionj0k7GhQtAKl7uf8hkhdO33cjaOXKq3lBTw67RCOUb4"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetDepartmentLambdaFunctionQualifiedArn"
            }
          },
          "GetAllDepartmentsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetAllDepartmentsLambdaVersionI40Eav1OWcrSX6Q2J5GfeRvSjuxtnIUp34Tq9yxFExI"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetAllDepartmentsLambdaFunctionQualifiedArn"
            }
          },
          "NotifyIssueCreatedLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.NotifyIssueCreatedLambdaVersionoPiLkpNysahLr9UGqRB6ET3kE96eg9feAr8Hk75PI"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-NotifyIssueCreatedLambdaFunctionQualifiedArn"
            }
          },
          "NotifyIssueUpdatedLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.NotifyIssueUpdatedLambdaVersion5rjFtWuzxjhavKD0HlR6LH1qsMxdrUqhVImXVisNM4k"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-NotifyIssueUpdatedLambdaFunctionQualifiedArn"
            }
          },
          "UnresolvedIssueLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.UnresolvedIssueLambdaVersionMA0fUJp9WF3tuYQ3Ia4HJrO2sDTn5Si7voJ07L7v8Y"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-UnresolvedIssueLambdaFunctionQualifiedArn"
            }
          },
          "AdminNewIssueReminderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.AdminNewIssueReminderLambdaVersionN2Q5qgUaLku1HZITCwfYI805n3aCi1xthODGYl1l1I"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-AdminNewIssueReminderLambdaFunctionQualifiedArn"
            }
          },
          "DailyUnresolvedIssueReminderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.DailyUnresolvedIssueReminderLambdaVersion1Sp5c3u1m1CNE9JwXX7ovOTIoBKBvOn3ST5fqQub8"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-DailyUnresolvedIssueReminderLambdaFunctionQualifiedArn"
            }
          },
          "NotifyIssueCommentOnLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.NotifyIssueCommentOnLambdaVersionBc5eicYsPk01pME5C1KDiO4yCUmwlkf3fs3guhRgME"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-NotifyIssueCommentOnLambdaFunctionQualifiedArn"
            }
          },
          "OnAssigneeAddedNotifyAssigneeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.OnAssigneeAddedNotifyAssigneeLambdaVersionBzfQX0BzPtLJHQNm5nYOIcRWKjsnWDuJNhPv4RaeRUQ"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-OnAssigneeAddedNotifyAssigneeLambdaFunctionQualifiedArn"
            }
          },
          "OverDuePendingIssuesReminderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.OverDuePendingIssuesReminderLambdaVersionQnZ5dT6WUFQqxLv4OPDIXQqQtkAbGMvaF2xHeRUi8U"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-OverDuePendingIssuesReminderLambdaFunctionQualifiedArn"
            }
          },
          "IssueStatusChangedLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.IssueStatusChangedLambdaVersionXIvsmDn3qc3iDIPKh8ujp9PHXPpGRQJbF3nPH0L6A4"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-IssueStatusChangedLambdaFunctionQualifiedArn"
            }
          },
          "UnverifiedPropertiesReminderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.UnverifiedPropertiesReminderLambdaVersioncIgyAo1R1dZDJl0n8ry8krNdE1hsa8TMNVxSxopcOg"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-UnverifiedPropertiesReminderLambdaFunctionQualifiedArn"
            }
          },
          "OnPropertyFlaggedLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.OnPropertyFlaggedLambdaVersioncTQQcQLI8Fd6ux2ccWjAIiHjpo4VxXzqYwUGZw1Cic"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-OnPropertyFlaggedLambdaFunctionQualifiedArn"
            }
          },
          "NotifyAdminAboutNewSubscriberLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.NotifyAdminAboutNewSubscriberLambdaVersionnZ7IW28fihK5EDUpr4lu3yfEvRyXYriZCvpud1Iaibk"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-NotifyAdminAboutNewSubscriberLambdaFunctionQualifiedArn"
            }
          },
          "CreateRoleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.CreateRoleLambdaVersionACYJgpue6gzOsBfHXzOg7XaemreCg9IsrUX7hQRLbI"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-CreateRoleLambdaFunctionQualifiedArn"
            }
          },
          "UpdateRoleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.UpdateRoleLambdaVersion545V10Ql4Cck5wkSvZYTDUX4XBDqt3hKqXLGL5jKAAM"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-UpdateRoleLambdaFunctionQualifiedArn"
            }
          },
          "DeleteRoleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.DeleteRoleLambdaVersionwW0VZPLLVlQrZK8H2k0lLM3oMlZpFtfVDJnZ7YDlk"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-DeleteRoleLambdaFunctionQualifiedArn"
            }
          },
          "GetRoleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetRoleLambdaVersionEQpmCn772kHFH7Nm5CQUfReB3uv3KmPqw557F7EWU"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetRoleLambdaFunctionQualifiedArn"
            }
          },
          "GetAllRolesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetAllRolesLambdaVersioneYy1n37IuyniAyNUpPZFU8SJ2Ye4RPfAnbbuIo7V0E"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetAllRolesLambdaFunctionQualifiedArn"
            }
          },
          "AdduserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.AdduserLambdaVersion6wp7TDRFuiVdrD602Ks5UonX3yriwj6kV1afMUoa1Y"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-AdduserLambdaFunctionQualifiedArn"
            }
          },
          "GetAllUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetAllUsersLambdaVersionLq0ocSzSyNzWk63gf33zBeKcviz2Bm0COFEzYccU"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetAllUsersLambdaFunctionQualifiedArn"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetUserLambdaVersionf99dggLR96ajUayFf348FgDEfyR2mAGhU76di0"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.UpdateUserLambdaVersion2OGV2bzkn0ApLdgctZfwkfCclpjHodo1U4Nx4eC9s"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-UpdateUserLambdaFunctionQualifiedArn"
            }
          },
          "CreatePropertyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.CreatePropertyLambdaVersionvZnGDztEfUfAiNwa3c87c7YVqOCUfGu4ZrcpqRQyos"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-CreatePropertyLambdaFunctionQualifiedArn"
            }
          },
          "UpdatePropertyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.UpdatePropertyLambdaVersionOmF8YOfu9N4yPVjOs5eotWMWXqK9ERPdgDT8lU8Ffg"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-UpdatePropertyLambdaFunctionQualifiedArn"
            }
          },
          "DeletePropertyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.DeletePropertyLambdaVersionMxJsdWZkZTHZT6uDywCdoRil4VaMnq2xTCQ4BQEg4"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-DeletePropertyLambdaFunctionQualifiedArn"
            }
          },
          "GetPropertyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetPropertyLambdaVersionC729JKhSj0auAT76jRQ3yKZ5XxnU7BFFLbFkQnZZTM"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetPropertyLambdaFunctionQualifiedArn"
            }
          },
          "GetAllPropertiesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetAllPropertiesLambdaVersionLMOVPbqwcmOdagwQxjwDhrgj9dbo64718VQB3InXo"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetAllPropertiesLambdaFunctionQualifiedArn"
            }
          },
          "UpdateBuildingDetailsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.UpdateBuildingDetailsLambdaVersion2Kf33vUZTc9MkitwcOV8XJrg8qKY2u1z8mgizaBXY"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-UpdateBuildingDetailsLambdaFunctionQualifiedArn"
            }
          },
          "UpdateLevyDetailsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.UpdateLevyDetailsLambdaVersionTjZZmbbcMRffVQhBDsQ213fNzlfsTbx8IcMBqeoHXJY"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-UpdateLevyDetailsLambdaFunctionQualifiedArn"
            }
          },
          "UpdateOwerDetailsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.UpdateOwerDetailsLambdaVersione3R7VffZJVYC03cIMk33unGNa8l2HjpRo5Mmvfnhr38"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-UpdateOwerDetailsLambdaFunctionQualifiedArn"
            }
          },
          "GetUnverifiedPropertiesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetUnverifiedPropertiesLambdaVersionmSnEvB6JlpjfeTyDkcBTfy1rfVLyEh2GYFyqralsDco"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetUnverifiedPropertiesLambdaFunctionQualifiedArn"
            }
          },
          "VerificationResetLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.VerificationResetLambdaVersion7msgrB1tJDOvqiwxfXFhmcdhhNp3e8454N6LyH48"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-VerificationResetLambdaFunctionQualifiedArn"
            }
          },
          "FlagPropertyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.FlagPropertyLambdaVersionORxvzYYMLlsepRB9Lfxo9ETLc64ttKqhH4ZviK0KQ"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-FlagPropertyLambdaFunctionQualifiedArn"
            }
          },
          "UpdateLastInteractionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.UpdateLastInteractionLambdaVersionOoYq2goABVZBK1reu4L3g1L5AYtj4WDjjwc3r7Gkw"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-UpdateLastInteractionLambdaFunctionQualifiedArn"
            }
          },
          "GetAllNewslettersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetAllNewslettersLambdaVersionMkcVmj4cAfdsAQNwkbMkRq9o0NMDgQU2ok3b8QkzfM"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetAllNewslettersLambdaFunctionQualifiedArn"
            }
          },
          "PostNewsletterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.PostNewsletterLambdaVersionKeAz66oq1SQaGsBhQVe1WhLsHQqpZw5hYoExPNtjKA"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-PostNewsletterLambdaFunctionQualifiedArn"
            }
          },
          "DeleteNewsletterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.DeleteNewsletterLambdaVersion2kywP8Dngt6GpaPXsQC8sOl87wlffJDVeJbGH3lMrg"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-DeleteNewsletterLambdaFunctionQualifiedArn"
            }
          },
          "EditNewsletterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.EditNewsletterLambdaVersionBOP9KW2x5gBopmkhAIKPtucy13ppVwKmEA5R8UWN4"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-EditNewsletterLambdaFunctionQualifiedArn"
            }
          },
          "GetArticleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetArticleLambdaVersionDYaf8eIBmQPNeR3rbKnpwX0uBt7EjPO410AvcCDRQo"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetArticleLambdaFunctionQualifiedArn"
            }
          },
          "RateNewsletterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.RateNewsletterLambdaVersiontjQxKd7msDzG6Fm5Z2F4iAaAV9sCoLaJpF3BRaNg"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-RateNewsletterLambdaFunctionQualifiedArn"
            }
          },
          "AddRSVPLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.AddRSVPLambdaVersionuWjduAWuBKCKbo96rpvLiGAufQoKDrFIPPFoo0WJzU"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-AddRSVPLambdaFunctionQualifiedArn"
            }
          },
          "GetAllRSVPLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetAllRSVPLambdaVersionTPAVn16SpfOjzAhv3JURDWLnX5DB6Qsvvu9jrnoH0"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetAllRSVPLambdaFunctionQualifiedArn"
            }
          },
          "GetRSVPLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetRSVPLambdaVersionBJV6zVTI2Iook4RQfTuqNUGk6J1c12nWJFvA0Eng"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetRSVPLambdaFunctionQualifiedArn"
            }
          },
          "CreateInteractionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.CreateInteractionLambdaVersionGsSHyFBOYLhxVSVPaiA8sZuPUmg1Uia1CFnL8x7Vc0w"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-CreateInteractionLambdaFunctionQualifiedArn"
            }
          },
          "GetAllInteractionsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetAllInteractionsLambdaVersion1Bk12XHxUBCYWVVtJjujlgp02Z8GL564QVwbsBpaRFw"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetAllInteractionsLambdaFunctionQualifiedArn"
            }
          },
          "GetInteractionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetInteractionLambdaVersionx80t0bYQk8YBnHy0oPwM3j5Mnq13i9AYv9ELNS4DFs"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetInteractionLambdaFunctionQualifiedArn"
            }
          },
          "GetUserInteractionsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetUserInteractionsLambdaVersionqcvMCegP14J15BMDw5ugll80p6fjvh3zewl2XKjRFnw"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetUserInteractionsLambdaFunctionQualifiedArn"
            }
          },
          "GetPropertyInteractionsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetPropertyInteractionsLambdaVersionuEvTK1CyuVv820OM37a59zrBAekINLKhcQjj5rvE"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetPropertyInteractionsLambdaFunctionQualifiedArn"
            }
          },
          "DeleteInteractionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.DeleteInteractionLambdaVersionQVvr1omNyZN0s542Le8fuQNmjaKzmLJDL5SVRzKYeeE"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-DeleteInteractionLambdaFunctionQualifiedArn"
            }
          },
          "UpdateInteractionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.UpdateInteractionLambdaVersionARxB0wAfzH8b5Y5NTRYiCutdJSxWyotuNM3jamUC3x0"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-UpdateInteractionLambdaFunctionQualifiedArn"
            }
          },
          "ZapierInteractionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.ZapierInteractionLambdaVersionYzcD7X9sKbByl5P96hOgtjEFX9qgwk0UPzw2DrqpxiU"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-ZapierInteractionLambdaFunctionQualifiedArn"
            }
          },
          "GetAGMDocumentsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetAGMDocumentsLambdaVersion00uLfolgw1xZoc0zDxDSxmQEErvJQWUwlcoMX4eNjE"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetAGMDocumentsLambdaFunctionQualifiedArn"
            }
          },
          "UploadAGMDocumentsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.UploadAGMDocumentsLambdaVersionaPQQjRPfIzyaF757NTSsmk3LAItjkDODC9esRpYR0"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-UploadAGMDocumentsLambdaFunctionQualifiedArn"
            }
          },
          "AddSubscriberLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.AddSubscriberLambdaVersionyH7R6WFdtiKUWUyqDpVadICfjJXwnsdKtnlEHu6vVc"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-AddSubscriberLambdaFunctionQualifiedArn"
            }
          },
          "GetAllMembersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Fn::GetAtt": [
                "VersionsNestedStack",
                "Outputs.GetAllMembersLambdaVersionpfUed8OhhZ5rgPwYf4CBHlOPDB5kK51OwcESM9Vxdk"
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-GetAllMembersLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Fn::GetAtt": [
                      "APINestedStack",
                      "Outputs.ApiGatewayRestApi"
                    ]
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/prod"
                ]
              ]
            },
            "Export": {
              "Name": "sls-wynberg-manage-my-area-prod-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "prune": {
        "automatic": true,
        "includeLayers": true
      },
      "webpack": {
        "webpackConfig": "./webpack.config.js",
        "includeModules": true
      },
      "dynamodb": {
        "stages": [
          "dev",
          "stag"
        ],
        "start": {
          "port": 8000,
          "dbPath": "./",
          "migrate": true
        }
      },
      "serverless-offline-aws-eventbridge": {
        "port": 4080,
        "mockEventBridgeServer": true,
        "pubSubPort": 4011,
        "debug": true,
        "account": ""
      },
      "splitStacks": {
        "perFunction": false,
        "perType": true,
        "perGroupFunction": false
      }
    },
    "plugins": [
      "serverless-webpack",
      "serverless-offline",
      "serverless-dynamodb-local",
      "serverless-deployment-bucket",
      "serverless-prune-plugin",
      "serverless-offline-aws-eventbridge",
      "serverless-plugin-split-stacks",
      "serverless-stack-termination-protection"
    ],
    "pluginsData": {},
    "functions": {
      "getAllConfigurations": {
        "handler": "src/functions/configurations/getAllConfigs/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "configurations",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getAllConfigurations",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetAllConfigurationsLambdaVersionyvmnl5sWG422AszV09cd2FqUO0iRPtIdWSwBjTXEjzI"
      },
      "createIssue": {
        "handler": "src/functions/issues/create/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "post",
              "path": "issues",
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodIssuesPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-createIssue",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateIssueLambdaVersiontMrjFS0dM2FzPdMFppRapGVLHt4KUlHPgSgjRh5FVcA"
      },
      "getAllIssues": {
        "handler": "src/functions/issues/getAll/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "issues",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getAllIssues",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetAllIssuesLambdaVersionHdn7Lg7lt9wDOCbz6oA2JnJegPV8RXkuKaqFp0sLJY"
      },
      "getIssue": {
        "handler": "src/functions/issues/get/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "issues/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getIssue",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetIssueLambdaVersionfPREjcCEcxPynkVHh7rqavFkcDIzWWQ4MJ1OiW78uQs"
      },
      "updateIssue": {
        "handler": "src/functions/issues/update/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "put",
              "path": "issues/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodIssuesIdVarPutApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-updateIssue",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateIssueLambdaVersionfy06Z4DsQQ6WHNDT9zL6vNFuoeU9sCqRLwMbsMkm1g"
      },
      "deleteIssue": {
        "handler": "src/functions/issues/delete/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "delete",
              "path": "issues/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-deleteIssue",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteIssueLambdaVersionMamAn46MwMaXxzQu3ja9IdiKtRJZtFWpkOxoB09bMA"
      },
      "getUserIssues": {
        "handler": "src/functions/issues/getUserIssues/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "issues/user-issues/{userId}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getUserIssues",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetUserIssuesLambdaVersionAezffBlK6hkcZukhHIvFY4SBYPOaIdvKSWcJV6rcq4"
      },
      "createIssueComment": {
        "handler": "src/functions/issues/createComment/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "post",
              "path": "issues/{id}/comments",
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodIssuesIdVarCommentsPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-createIssueComment",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateIssueCommentLambdaVersionjFWmKP7o7xLSkgngnQmNqlOEGsPiqEB02jCsZHguVI"
      },
      "addAssignee": {
        "handler": "src/functions/issues/addAssignee/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "put",
              "path": "issues/{id}/add-assignee",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodIssuesIdVarAddDashassigneePutApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-addAssignee",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "AddAssigneeLambdaVersionvIh5aQxPxHIiQbMuque6XI4P94lonNY0CU3i2b7Fnnc"
      },
      "changeIssueStatus": {
        "handler": "src/functions/issues/changeStatus/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "put",
              "path": "issues/{id}/change-status",
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodIssuesIdVarChangeDashstatusPutApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-changeIssueStatus",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ChangeIssueStatusLambdaVersionOpnwvrnmS8thKj511lXwDhbeKHoKdvKeUyxUWCelogk"
      },
      "getIssueComments": {
        "handler": "src/functions/issues/getIssueComments/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "issues/{id}/comments",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getIssueComments",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetIssueCommentsLambdaVersionM6ZlV9t219yrOUVsIMvlkyjXBwBuR7mNL8zUQiavQ"
      },
      "getIssueByReference": {
        "handler": "src/functions/issues/getIssueByRefNumber/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "issues/get-by-ref/{refNumber}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getIssueByReference",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetIssueByReferenceLambdaVersion99oo8qMBO11OLDfrbY3ub181nx6k4bWt1XFrIu8Ez7E"
      },
      "addIssueJobReference": {
        "handler": "src/functions/issues/addJobReference/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "post",
              "path": "issues/{id}/add-job-reference",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodIssuesIdVarAddDashjobDashreferencePostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-addIssueJobReference",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "AddIssueJobReferenceLambdaVersion4gFeDdMtMPfcQXLEKNvvp6SRqAKyc7x2beDP12xo"
      },
      "createCategory": {
        "handler": "src/functions/categories/create/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "post",
              "path": "categories",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodCategoriesPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-createCategory",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateCategoryLambdaVersionhY5wVfqI4h5yd468NCj5ZoBeZ48D8NrvzGsXv0miH3o"
      },
      "updateCategory": {
        "handler": "src/functions/categories/update/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "put",
              "path": "categories/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodCategoriesIdVarPutApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-updateCategory",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateCategoryLambdaVersionOCijmls485PzphCz4LNn33IJkfvta1STQCELfd32Bk"
      },
      "deleteCategory": {
        "handler": "src/functions/categories/delete/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "delete",
              "path": "categories/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-deleteCategory",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteCategoryLambdaVersionamUDp3vOVcLoM3pJcDmuZz4jRV0RpChbPKtwvJE"
      },
      "getCategory": {
        "handler": "src/functions/categories/get/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "categories/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getCategory",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetCategoryLambdaVersionPGxRX0gOtyu2CEXewMuU2DRMkB3JA7HtPBsh16h9bYk"
      },
      "getAllCategories": {
        "handler": "src/functions/categories/getAll/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "categories",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getAllCategories",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetAllCategoriesLambdaVersionuFGSwEICpNBBOqoWTePoN9dBzW49VA2z9AgLFUXYG4"
      },
      "createDepartment": {
        "handler": "src/functions/departments/create/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "post",
              "path": "departments",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodDepartmentsPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-createDepartment",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateDepartmentLambdaVersionYnOunkLjzZu6BJ0iamztr54rw9xCKj7n5JeaYtfR6A"
      },
      "updateDepartment": {
        "handler": "src/functions/departments/update/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "put",
              "path": "departments/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodDepartmentsIdVarPutApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-updateDepartment",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateDepartmentLambdaVersion7QVPtVcLRRW7jXSjvkQoNur3Q2zvbVp4CYNnHkGfIlU"
      },
      "deleteDepartment": {
        "handler": "src/functions/departments/delete/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "delete",
              "path": "departments/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-deleteDepartment",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteDepartmentLambdaVersiondF3Nthc3swIbP9xtTf061Z02H9Y9jPWPDpzBq3to"
      },
      "getDepartment": {
        "handler": "src/functions/departments/get/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "departments/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getDepartment",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetDepartmentLambdaVersionj0k7GhQtAKl7uf8hkhdO33cjaOXKq3lBTw67RCOUb4"
      },
      "getAllDepartments": {
        "handler": "src/functions/departments/getAll/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "departments",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getAllDepartments",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetAllDepartmentsLambdaVersionI40Eav1OWcrSX6Q2J5GfeRvSjuxtnIUp34Tq9yxFExI"
      },
      "notifyIssueCreated": {
        "handler": "src/functions/notifications/NotifyIssueCreated/handler.main",
        "tracing": true,
        "events": [
          {
            "eventBridge": {
              "eventBus": "arn:aws:events:eu-central-1:550384794237:event-bus/notifications",
              "pattern": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"WynbergmanagemyareaprodnotifyIssueCreatedrule1EventBridgeRule\"][\"Properties\"][\"EventPattern\"]"
              }
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-notifyIssueCreated",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "NotifyIssueCreatedLambdaVersionoPiLkpNysahLr9UGqRB6ET3kE96eg9feAr8Hk75PI"
      },
      "notifyIssueUpdated": {
        "handler": "src/functions/notifications/notifyissueUpdated/handler.main",
        "tracing": true,
        "events": [
          {
            "eventBridge": {
              "eventBus": "arn:aws:events:eu-central-1:550384794237:event-bus/notifications",
              "pattern": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"WynbergmanagemyareaprodnotifyIssueUpdatedrule1EventBridgeRule\"][\"Properties\"][\"EventPattern\"]"
              }
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-notifyIssueUpdated",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "NotifyIssueUpdatedLambdaVersion5rjFtWuzxjhavKD0HlR6LH1qsMxdrUqhVImXVisNM4k"
      },
      "unresolvedIssue": {
        "handler": "src/functions/notifications/adminNewIssueReminder/handler.main",
        "tracing": true,
        "events": [
          {
            "schedule": "rate(24 hours)"
          }
        ],
        "name": "wynberg-manage-my-area-prod-unresolvedIssue",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UnresolvedIssueLambdaVersionMA0fUJp9WF3tuYQ3Ia4HJrO2sDTn5Si7voJ07L7v8Y"
      },
      "adminNewIssueReminder": {
        "handler": "src/functions/notifications/adminNewIssueReminder/handler.main",
        "tracing": true,
        "events": [
          {
            "schedule": "rate(24 hours)"
          }
        ],
        "name": "wynberg-manage-my-area-prod-adminNewIssueReminder",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "AdminNewIssueReminderLambdaVersionN2Q5qgUaLku1HZITCwfYI805n3aCi1xthODGYl1l1I"
      },
      "dailyUnresolvedIssueReminder": {
        "handler": "src/functions/notifications/dailyUnresolvedIssueReminder/handler.main",
        "tracing": true,
        "events": [
          {
            "schedule": "rate(24 hours)"
          }
        ],
        "name": "wynberg-manage-my-area-prod-dailyUnresolvedIssueReminder",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DailyUnresolvedIssueReminderLambdaVersion1Sp5c3u1m1CNE9JwXX7ovOTIoBKBvOn3ST5fqQub8"
      },
      "notifyIssueCommentOn": {
        "handler": "src/functions/notifications/notifyIssueCommentedOn/handler.main",
        "tracing": true,
        "events": [
          {
            "eventBridge": {
              "eventBus": "arn:aws:events:eu-central-1:550384794237:event-bus/notifications",
              "pattern": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"WynbergmanagemyareaprodnotifyIssueCommentOnrule1EventBridgeRule\"][\"Properties\"][\"EventPattern\"]"
              }
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-notifyIssueCommentOn",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "NotifyIssueCommentOnLambdaVersionBc5eicYsPk01pME5C1KDiO4yCUmwlkf3fs3guhRgME"
      },
      "onAssigneeAddedNotifyAssignee": {
        "handler": "src/functions/notifications/onAssigneeAddedNotifyAssignee/handler.main",
        "tracing": true,
        "events": [
          {
            "eventBridge": {
              "eventBus": "arn:aws:events:eu-central-1:550384794237:event-bus/notifications",
              "pattern": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"WynbergmanagemyareaprodonAssigneeAddedNotifyAssigneerule1EventBridgeRule\"][\"Properties\"][\"EventPattern\"]"
              }
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-onAssigneeAddedNotifyAssignee",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "OnAssigneeAddedNotifyAssigneeLambdaVersionBzfQX0BzPtLJHQNm5nYOIcRWKjsnWDuJNhPv4RaeRUQ"
      },
      "overDuePendingIssuesReminder": {
        "handler": "src/functions/notifications/overDuePendingIssuesReminder/handler.main",
        "tracing": true,
        "events": [
          {
            "schedule": "rate(24 hours)"
          }
        ],
        "name": "wynberg-manage-my-area-prod-overDuePendingIssuesReminder",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "OverDuePendingIssuesReminderLambdaVersionQnZ5dT6WUFQqxLv4OPDIXQqQtkAbGMvaF2xHeRUi8U"
      },
      "issueStatusChanged": {
        "handler": "src/functions/notifications/issueStatusChanged/handler.main",
        "tracing": true,
        "events": [
          {
            "eventBridge": {
              "eventBus": "arn:aws:events:eu-central-1:550384794237:event-bus/notifications",
              "pattern": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"WynbergmanagemyareaprodissueStatusChangedrule1EventBridgeRule\"][\"Properties\"][\"EventPattern\"]"
              }
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-issueStatusChanged",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "IssueStatusChangedLambdaVersionXIvsmDn3qc3iDIPKh8ujp9PHXPpGRQJbF3nPH0L6A4"
      },
      "unverifiedPropertiesReminder": {
        "handler": "src/functions/notifications/unverifiedPropertiesReminder/handler.main",
        "tracing": true,
        "timeout": 30,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "properties/verifications-reminder",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "schedule": "rate(24 hours)"
          }
        ],
        "name": "wynberg-manage-my-area-prod-unverifiedPropertiesReminder",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UnverifiedPropertiesReminderLambdaVersioncIgyAo1R1dZDJl0n8ry8krNdE1hsa8TMNVxSxopcOg"
      },
      "OnPropertyFlagged": {
        "handler": "src/functions/notifications/propertyFlagged/handler.main",
        "tracing": true,
        "events": [
          {
            "eventBridge": {
              "eventBus": "arn:aws:events:eu-central-1:550384794237:event-bus/notifications",
              "pattern": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"WynbergmanagemyareaprodOnPropertyFlaggedrule1EventBridgeRule\"][\"Properties\"][\"EventPattern\"]"
              }
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-OnPropertyFlagged",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "OnPropertyFlaggedLambdaVersioncTQQcQLI8Fd6ux2ccWjAIiHjpo4VxXzqYwUGZw1Cic"
      },
      "notifyAdminAboutNewSubscriber": {
        "handler": "src/functions/notifications/NotifyAdminAboutNewSubscriber/handler.main",
        "tracing": true,
        "events": [
          {
            "eventBridge": {
              "eventBus": "arn:aws:events:eu-central-1:550384794237:event-bus/notifications",
              "pattern": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"WynbergmanagemyareaprodnotifyAdminAboutNewSubscriberrule1EventBridgeRule\"][\"Properties\"][\"EventPattern\"]"
              }
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-notifyAdminAboutNewSubscriber",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "NotifyAdminAboutNewSubscriberLambdaVersionnZ7IW28fihK5EDUpr4lu3yfEvRyXYriZCvpud1Iaibk"
      },
      "createRole": {
        "handler": "src/functions/roles/create/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "post",
              "path": "roles",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodRolesPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-createRole",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateRoleLambdaVersionACYJgpue6gzOsBfHXzOg7XaemreCg9IsrUX7hQRLbI"
      },
      "updateRole": {
        "handler": "src/functions/roles/update/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "put",
              "path": "roles/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodRolesIdVarPutApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-updateRole",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateRoleLambdaVersion545V10Ql4Cck5wkSvZYTDUX4XBDqt3hKqXLGL5jKAAM"
      },
      "deleteRole": {
        "handler": "src/functions/roles/delete/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "path": "roles/{id}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-deleteRole",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteRoleLambdaVersionwW0VZPLLVlQrZK8H2k0lLM3oMlZpFtfVDJnZ7YDlk"
      },
      "getRole": {
        "handler": "src/functions/roles/get/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "roles/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getRole",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetRoleLambdaVersionEQpmCn772kHFH7Nm5CQUfReB3uv3KmPqw557F7EWU"
      },
      "getAllRoles": {
        "handler": "src/functions/roles/getAll/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "roles",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getAllRoles",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetAllRolesLambdaVersioneYy1n37IuyniAyNUpPZFU8SJ2Ye4RPfAnbbuIo7V0E"
      },
      "adduser": {
        "handler": "src/functions/users/addUser/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "post",
              "path": "users",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodUsersPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-adduser",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "AdduserLambdaVersion6wp7TDRFuiVdrD602Ks5UonX3yriwj6kV1afMUoa1Y"
      },
      "getAllUsers": {
        "handler": "src/functions/users/getAllUsers/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "users",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getAllUsers",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetAllUsersLambdaVersionLq0ocSzSyNzWk63gf33zBeKcviz2Bm0COFEzYccU"
      },
      "getUser": {
        "handler": "src/functions/users/getUser/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "users/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getUser",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetUserLambdaVersionf99dggLR96ajUayFf348FgDEfyR2mAGhU76di0"
      },
      "updateUser": {
        "handler": "src/functions/users/updateUser/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "put",
              "path": "users/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodUsersIdVarPutApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-updateUser",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateUserLambdaVersion2OGV2bzkn0ApLdgctZfwkfCclpjHodo1U4Nx4eC9s"
      },
      "createProperty": {
        "handler": "src/functions/properties/create/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "post",
              "path": "properties",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodPropertiesPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-createProperty",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreatePropertyLambdaVersionvZnGDztEfUfAiNwa3c87c7YVqOCUfGu4ZrcpqRQyos"
      },
      "updateProperty": {
        "handler": "src/functions/properties/updatePropertyDetails/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "put",
              "path": "properties/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodPropertiesIdVarPutApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-updateProperty",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdatePropertyLambdaVersionOmF8YOfu9N4yPVjOs5eotWMWXqK9ERPdgDT8lU8Ffg"
      },
      "deleteProperty": {
        "handler": "src/functions/properties/delete/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "delete",
              "path": "properties/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-deleteProperty",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeletePropertyLambdaVersionMxJsdWZkZTHZT6uDywCdoRil4VaMnq2xTCQ4BQEg4"
      },
      "getProperty": {
        "handler": "src/functions/properties/get/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "properties/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getProperty",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetPropertyLambdaVersionC729JKhSj0auAT76jRQ3yKZ5XxnU7BFFLbFkQnZZTM"
      },
      "getAllProperties": {
        "handler": "src/functions/properties/getAll/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "properties",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getAllProperties",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetAllPropertiesLambdaVersionLMOVPbqwcmOdagwQxjwDhrgj9dbo64718VQB3InXo"
      },
      "updateBuildingDetails": {
        "handler": "src/functions/properties/updateBuildingDetails/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "put",
              "path": "properties/{id}/building",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodPropertiesIdVarBuildingPutApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-updateBuildingDetails",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateBuildingDetailsLambdaVersion2Kf33vUZTc9MkitwcOV8XJrg8qKY2u1z8mgizaBXY"
      },
      "updateLevyDetails": {
        "handler": "src/functions/properties/updateLevyDetails/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "put",
              "path": "properties/{id}/levy",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodPropertiesIdVarLevyPutApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-updateLevyDetails",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateLevyDetailsLambdaVersionTjZZmbbcMRffVQhBDsQ213fNzlfsTbx8IcMBqeoHXJY"
      },
      "updateOwerDetails": {
        "handler": "src/functions/properties/updateOwnerDetails/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "put",
              "path": "properties/{id}/owner",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodPropertiesIdVarOwnerPutApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-updateOwerDetails",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateOwerDetailsLambdaVersione3R7VffZJVYC03cIMk33unGNa8l2HjpRo5Mmvfnhr38"
      },
      "getUnverifiedProperties": {
        "handler": "src/functions/properties/getUnverified/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "properties/unverified",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getUnverifiedProperties",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetUnverifiedPropertiesLambdaVersionmSnEvB6JlpjfeTyDkcBTfy1rfVLyEh2GYFyqralsDco"
      },
      "verificationReset": {
        "handler": "src/functions/properties/verificationReset/handler.main",
        "tracing": true,
        "timeout": 30,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "properties/verification-reset",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "schedule": "rate(24 hours)"
          }
        ],
        "name": "wynberg-manage-my-area-prod-verificationReset",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "VerificationResetLambdaVersion7msgrB1tJDOvqiwxfXFhmcdhhNp3e8454N6LyH48"
      },
      "flagProperty": {
        "handler": "src/functions/properties/flagProperty/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "post",
              "path": "properties/{id}/flag",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodPropertiesIdVarFlagPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-flagProperty",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "FlagPropertyLambdaVersionORxvzYYMLlsepRB9Lfxo9ETLc64ttKqhH4ZviK0KQ"
      },
      "updateLastInteraction": {
        "handler": "src/functions/properties/updateLastInteraction/handler.main",
        "tracing": true,
        "events": [
          {
            "eventBridge": {
              "eventBus": "arn:aws:events:eu-central-1:550384794237:event-bus/notifications",
              "pattern": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"WynbergmanagemyareaprodupdateLastInteractionrule1EventBridgeRule\"][\"Properties\"][\"EventPattern\"]"
              }
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-updateLastInteraction",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateLastInteractionLambdaVersionOoYq2goABVZBK1reu4L3g1L5AYtj4WDjjwc3r7Gkw"
      },
      "getAllNewsletters": {
        "handler": "src/functions/newsletter/getAll/handler.main",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "newsletters",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getAllNewsletters",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetAllNewslettersLambdaVersionMkcVmj4cAfdsAQNwkbMkRq9o0NMDgQU2ok3b8QkzfM"
      },
      "postNewsletter": {
        "handler": "src/functions/newsletter/create/handler.main",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "newsletters",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodNewslettersPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-postNewsletter",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "PostNewsletterLambdaVersionKeAz66oq1SQaGsBhQVe1WhLsHQqpZw5hYoExPNtjKA"
      },
      "deleteNewsletter": {
        "handler": "src/functions/newsletter/delete/handler.main",
        "events": [
          {
            "http": {
              "method": "delete",
              "path": "newsletters/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-deleteNewsletter",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteNewsletterLambdaVersion2kywP8Dngt6GpaPXsQC8sOl87wlffJDVeJbGH3lMrg"
      },
      "editNewsletter": {
        "handler": "src/functions/newsletter/edit/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "put",
              "path": "newsletters/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodNewslettersIdVarPutApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-editNewsletter",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "EditNewsletterLambdaVersionBOP9KW2x5gBopmkhAIKPtucy13ppVwKmEA5R8UWN4"
      },
      "getArticle": {
        "handler": "src/functions/newsletter/getArticle/handler.main",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "newsletters/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getArticle",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetArticleLambdaVersionDYaf8eIBmQPNeR3rbKnpwX0uBt7EjPO410AvcCDRQo"
      },
      "rateNewsletter": {
        "handler": "src/functions/newsletter/rateArticle/handler.main",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "rateNewsletter",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodRatenewsletterPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-rateNewsletter",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "RateNewsletterLambdaVersiontjQxKd7msDzG6Fm5Z2F4iAaAV9sCoLaJpF3BRaNg"
      },
      "addRSVP": {
        "handler": "src/functions/rsvps/add/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "post",
              "path": "rsvp",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodRsvpPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-addRSVP",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "AddRSVPLambdaVersionuWjduAWuBKCKbo96rpvLiGAufQoKDrFIPPFoo0WJzU"
      },
      "getAllRSVP": {
        "handler": "src/functions/rsvps/getAll/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "rsvp",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getAllRSVP",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetAllRSVPLambdaVersionTPAVn16SpfOjzAhv3JURDWLnX5DB6Qsvvu9jrnoH0"
      },
      "getRSVP": {
        "handler": "src/functions/rsvps/get/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "rsvp/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getRSVP",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetRSVPLambdaVersionBJV6zVTI2Iook4RQfTuqNUGk6J1c12nWJFvA0Eng"
      },
      "createInteraction": {
        "handler": "src/functions/interactions/createInteraction/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "post",
              "path": "interactions",
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodInteractionsPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-createInteraction",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateInteractionLambdaVersionGsSHyFBOYLhxVSVPaiA8sZuPUmg1Uia1CFnL8x7Vc0w"
      },
      "getAllInteractions": {
        "handler": "src/functions/interactions/getAllInteractions/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "interactions",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getAllInteractions",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetAllInteractionsLambdaVersion1Bk12XHxUBCYWVVtJjujlgp02Z8GL564QVwbsBpaRFw"
      },
      "getInteraction": {
        "handler": "src/functions/interactions/getInteraction/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "interactions/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getInteraction",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetInteractionLambdaVersionx80t0bYQk8YBnHy0oPwM3j5Mnq13i9AYv9ELNS4DFs"
      },
      "getUserInteractions": {
        "handler": "src/functions/interactions/getUserInteractions/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "interactions/user/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getUserInteractions",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetUserInteractionsLambdaVersionqcvMCegP14J15BMDw5ugll80p6fjvh3zewl2XKjRFnw"
      },
      "getPropertyInteractions": {
        "handler": "src/functions/interactions/getPropertyInteractions/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "interactions/property/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getPropertyInteractions",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetPropertyInteractionsLambdaVersionuEvTK1CyuVv820OM37a59zrBAekINLKhcQjj5rvE"
      },
      "deleteInteraction": {
        "handler": "src/functions/interactions/deleteInteraction/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "delete",
              "path": "interactions/{id}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-deleteInteraction",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteInteractionLambdaVersionQVvr1omNyZN0s542Le8fuQNmjaKzmLJDL5SVRzKYeeE"
      },
      "updateInteraction": {
        "handler": "src/functions/interactions/updateInteraction/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "put",
              "path": "interactions/{id}",
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodInteractionsIdVarPutApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-updateInteraction",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateInteractionLambdaVersionARxB0wAfzH8b5Y5NTRYiCutdJSxWyotuNM3jamUC3x0"
      },
      "zapierInteraction": {
        "handler": "src/functions/interactions/zapierInteraction/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "post",
              "path": "interactions/zapier",
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodInteractionsZapierPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-zapierInteraction",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ZapierInteractionLambdaVersionYzcD7X9sKbByl5P96hOgtjEFX9qgwk0UPzw2DrqpxiU"
      },
      "getAGMDocuments": {
        "handler": "src/functions/agm/get/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "agmdoc",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getAGMDocuments",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetAGMDocumentsLambdaVersion00uLfolgw1xZoc0zDxDSxmQEErvJQWUwlcoMX4eNjE"
      },
      "uploadAGMDocuments": {
        "handler": "src/functions/agm/create/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "post",
              "path": "agmdoc",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-uploadAGMDocuments",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UploadAGMDocumentsLambdaVersionaPQQjRPfIzyaF757NTSsmk3LAItjkDODC9esRpYR0"
      },
      "addSubscriber": {
        "handler": "src/functions/mail-subscribers/add/handler.main",
        "tracing": true,
        "events": [
          {
            "http": {
              "method": "post",
              "path": "mail-subscribers",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodMailDashsubscribersPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-addSubscriber",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "AddSubscriberLambdaVersionyH7R6WFdtiKUWUyqDpVadICfjJXwnsdKtnlEHu6vVc"
      },
      "getAllMembers": {
        "handler": "src/functions/mail-subscribers/getAll/handler.main",
        "tracing": true,
        "timeout": 15,
        "events": [
          {
            "http": {
              "method": "get",
              "path": "mail-subscribers",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "wynberg-manage-my-area-prod-getAllMembers",
        "package": {
          "artifact": ".serverless\\wynberg-manage-my-area.zip"
        },
        "memory": 1024,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetAllMembersLambdaVersionpfUed8OhhZ5rgPwYf4CBHlOPDB5kK51OwcESM9Vxdk"
      }
    },
    "resources": {
      "Resources": {
        "IssuesTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "wynberg-manage-my-area-prod-issues",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "CategoriesTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "wynberg-manage-my-area-prod-categories",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "DepartmentsTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "wynberg-manage-my-area-prod-departments",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "RolesTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "wynberg-manage-my-area-prod-roles",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "LogsTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Delete",
          "Properties": {
            "TableName": "wynberg-manage-my-area-prod-logs",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ]
          }
        },
        "UsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "wynberg-manage-my-area-prod-users",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "NewslettersTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Delete",
          "Properties": {
            "TableName": "wynberg-manage-my-area-prod-newsletter",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "newsletterId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "slug",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "newsletterId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "slug",
                "KeySchema": [
                  {
                    "AttributeName": "slug",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "propertiesTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "wynberg-manage-my-area-prod-properties",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "RSVPTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "wynberg-manage-my-area-prod-rsvp",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "rsvpId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "rsvpId",
                "KeyType": "HASH"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "InteractionsTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "wynberg-manage-my-area-prod-interactions",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "AGMTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "wynberg-manage-my-area-prod-agmdocuments",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "documentId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "documentId",
                "KeyType": "HASH"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "MailSubscribersTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Delete",
          "Properties": {
            "TableName": "wynberg-manage-my-area-prod-mailSubscribers",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.ts",
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": "2",
      "variablesResolutionMode": "20210326",
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "package": {
        "patterns": [
          "!.dynamodb/**",
          "!node_modules/**"
        ],
        "deploymentBucket": "turati-serverless-deployments",
        "artifactDirectoryName": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/wynberg-manage-my-area/prod/1661866222633-2022-08-30T13:30:22.633Z",
    "artifact": ""
  }
}